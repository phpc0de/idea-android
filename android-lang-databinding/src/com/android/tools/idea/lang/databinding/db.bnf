/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
  parserClass="com.android.tools.idea.lang.databinding.parser.DbParser"
  extends="com.android.tools.idea.lang.databinding.psi.DataBindingPsiElement"

  psiClassPrefix="PsiDb"
  psiImplClassSuffix="Impl"
  psiPackage="com.android.tools.idea.lang.databinding.psi"
  psiImplPackage="com.android.tools.idea.lang.databinding.psi.impl"

  elementTypeHolderClass="com.android.tools.idea.lang.databinding.psi.DbTokenTypes"
  elementTypeClass="com.android.tools.idea.lang.databinding.psi.DbElementType"
  tokenTypeClass="com.android.tools.idea.lang.databinding.psi.DbTokenType"

  classHeader='generatedFilesHeader.txt'

  extends(".*Expr")=expr

  tokens=[
    // literals
    TRUE='true'
    FALSE='false'
    NULL='null'

    // primitive types
    BOOLEAN_KEYWORD='boolean'
    BYTE_KEYWORD='byte'
    CHAR_KEYWORD='char'
    SHORT_KEYWORD='short'
    INT_KEYWORD='int'
    LONG_KEYWORD='long'
    FLOAT_KEYWORD='float'
    DOUBLE_KEYWORD='double'

    // other keywords
    VOID_KEYWORD='void'
    CLASS_KEYWORD='class'
    INSTANCEOF_KEYWORD='instanceof'
    DEFAULT_KEYWORD='default'

    // operators
    EQEQ='=='
    NE='!='
    LE='<='
    LTLT='<<'
    LT='<'
    GTGTGT='>>>'
    GTGT='>>'
    GTEQ='>='
    GT='>'
    EQ='='
    EXCL='!'
    TILDE='~'
    QUESTQUEST='??'
    QUEST='?'
    COLONCOLON='::'
    COLON=':'
    PLUS='+'
    MINUS='-'
    ASTERISK='*'
    DIV='/'
    ANDAND='&&'
    AND='&'
    OROR='||'
    OR='|'
    XOR='^'
    PERC='%'
    LAMBDA='->'

    // other symbols
    LPARENTH='('
    RPARENTH=')'
    LBRACKET='['
    RBRACKET=']'
    COMMA=','
    DOT='.'

    // Some more tokens are written directly in the flex file. Follow instructions above to make sure that they are not overridden.
  ]

}

dataBindingExpression
  ::= lambdaExpression  // RootLambda
  |   expr defaults?    // RootExpr

// All branches here must end in "Expr"
expr
  ::= nullCoalesceExpr     //  '??'
  |   ternaryExpr
  |   logicalOrExpr        //  '||'
  |   logicalAndExpr
  |   binaryOrExpr         //  '|'
  |   binaryXorExpr
  |   binaryAndExpr
  |   eqComparisonExpr     //  '==' and '!='
  |   instanceOfExpr
  |   ineqComparisonExpr   //  '<=', '<' etc.
  |   bitShiftExpr
  |   addExpr              //  '+' and '-'
  |   mulExpr              //  '*' and '/' and '%'
  |   negationExpr         //  '!' and '~'
  |   signChangeExpr
  |   castExpr
  |   callExpr
  |   arrayExpr            //  array op - []
  |   qualRefExpr          //  field access
  |   simpleRefExpr
  |   functionRefExpr      //  method reference using '::'
  |   resourcesExpr
  |   classExtractionExpr
  |   voidExpr
  |   literalExpr
  |   parenExpr           //  (grouping)

// Understanding 'fake refExpr', 'simpleRefExpr', and 'qualRefExpr'
//
// It's essentially a trick that improves parsing behavior which is otherwise encapsulated away
// from the developer (as it only generates a single PsiDbRefExpr class that handles everything).
//
// Imagine you are parsing both "identifier" and "qualified.prefix.identifier". As a developer,
// these two cases are the same kind of expression - an identifier with and without a qualifier.
// Therefore, there should only be one PSI type to represent both of them.
//
// However, when parsing, it is useful to have a base case where parsing knows it can stop,
// which in this case is simpleRefExpr.
//
// expr   = "a.b.c" -> qualRef,   with id = 'c', expr'  = "a.b"
// expr'  = "a.b"   -> qualRef,   with id = 'b', expr'' = "a"
// expr'' = "a"     -> simpleRef, with id = 'a' // Stop parsing here
//
// So, for the parser, its useful to distinguish these two types; while, for the developer, we want
// to collapse the whole "a.b.c" expression into a single PSI element. This is accomplished with a
// fake rule (which is used to generate the PSI element) and two parsing rules with extends and
// elementType tags to force them to be represented by the same PSI element.
//
// As a developer, if you have a PsiDbRefExpr and want to know if it represents a qualified or
// unqualified identifier, just call PsiDbRefExpr#getExpr() and see if it returns null.
//
// See also:
// b/37137454: Modify databinding expression grammar to allow calls to unqualified methods
// https://github.com/JetBrains/Grammar-Kit/blob/master/HOWTO.md#24-compact-expression-parsing-with-priorities
// https://github.com/JetBrains/Grammar-Kit/blob/master/testData/generator/ExprParser.bnf
fake refExpr ::= expr? '.' id
simpleRefExpr ::= id {extends=refExpr elementType=refExpr}
qualRefExpr ::= expr '.' id {extends=refExpr elementType=refExpr}
nullCoalesceExpr ::= expr '??' expr
ternaryExpr ::= expr '?' expr ':' expr {rightAssociative = true}
logicalOrExpr ::= expr '||' expr
logicalAndExpr ::= expr '&&' expr
binaryOrExpr ::= expr '|' expr
binaryXorExpr ::= expr '^' expr
binaryAndExpr ::= expr '&' expr
eqComparisonExpr ::= expr eqComparisonOp expr
instanceOfExpr ::= expr 'instanceof' expr
ineqComparisonExpr ::= expr ineqComparisonOp expr
bitShiftExpr ::= expr bitShiftOp expr
addExpr ::= expr addOp expr
mulExpr ::= expr mulOp expr
negationExpr ::= negationOp expr
signChangeExpr ::= signOp expr
castExpr ::= '(' type ')' expr
callExpr ::= refExpr '(' expressionList? ')'
arrayExpr ::= expr bracketArgument
functionRefExpr ::= expr '::' id
resourcesExpr ::= RESOURCE_REFERENCE resourceParameters?
classExtractionExpr ::= type '.' 'class'
voidExpr ::= voidLiteral
literalExpr ::= literal
parenExpr ::= '(' expr ')'

private eqComparisonOp ::= '==' | '!='
private ineqComparisonOp ::= '<=' | '>=' | '<' | '>'
private bitShiftOp ::= '<<' | '>>>' | '>>'
private addOp ::= '+' | '-'
private signOp ::= '+' | '-'
private mulOp ::= '*' | '/' | '%'
private negationOp ::= '~' | '!'

expressionList ::= expr (',' expr)*
bracketArgument ::= '[' expr ']'

private literal
  ::= INTEGER_LITERAL
  |   FLOAT_LITERAL
  |   LONG_LITERAL
  |   DOUBLE_LITERAL
  |   TRUE | FALSE
  |   NULL
  |   CHARACTER_LITERAL
  |   STRING_LITERAL

private voidLiteral
  ::= 'void'
  |   'Void'   // TODO: Add /shruggie if escaping works fine.

typeArguments ::= '<' type (',' type)* '>'

type ::= primitiveType ('[' ']')* | classOrInterfaceType ('[' ']')*

id ::= IDENTIFIER

classOrInterfaceType ::= IDENTIFIER typeArguments? ('.' IDENTIFIER typeArguments? )*

resourceParameters ::= '(' expressionList ')'

primitiveType
  ::= BOOLEAN_KEYWORD
  |   BYTE_KEYWORD
  |   CHAR_KEYWORD
  |   SHORT_KEYWORD
  |   INT_KEYWORD
  |   LONG_KEYWORD
  |   FLOAT_KEYWORD
  |   DOUBLE_KEYWORD

defaults ::= ',' 'default' '=' constantValue

constantValue
  ::= literal
  |   RESOURCE_REFERENCE
  |   IDENTIFIER

lambdaExpression
  ::= lambdaParameters '->' expr

lambdaParameters
  ::= '(' inferredFormalParameterList? ')'
  |   inferredFormalSingleParameterList

inferredFormalParameterList ::= inferredFormalParameter (',' inferredFormalParameter)*

// Although inferredFormatParameterList and inferredFormatSingleParameterList are different for the parser, they are
// fundamentally the same concept (e.g. "(value) -> ..." is equivalent to "value -> ..."), so we make sure we generate
// PSI that allows us to treat these as the same case.
inferredFormalSingleParameterList ::= inferredFormalParameter {extends=inferredFormalParameterList elementType=inferredFormalParameterList}

inferredFormalParameter ::= IDENTIFIER