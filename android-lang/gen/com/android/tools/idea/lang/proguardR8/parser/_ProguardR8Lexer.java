/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.android.tools.idea.lang.proguardR8.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.android.tools.idea.lang.proguardR8.psi.ProguardR8PsiTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_ProguardR8Lexer.flex</tt>
 */
public class _ProguardR8Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATE_JAVA_SECTION_HEADER = 2;
  public static final int STATE_JAVA_SECTION_BODY = 4;
  public static final int STATE_FLAG_ARGS = 6;
  public static final int STATE_FILE_NAME = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 24160 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\1\1\21\1\22\1\23\1\1\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\1\1\34"+
    "\1\35\1\36\2\37\1\40\7\37\1\41\1\42\1\43\1\37\1\44\1\45\2\37\31\1\1\46\121"+
    "\1\1\47\4\1\1\50\1\1\1\51\1\52\1\53\1\54\1\55\1\56\53\1\1\57\41\37\1\1\1\60"+
    "\1\61\1\1\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\1\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\3\37\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\37\1\112\1\37\1\113\1\114\2\37\3\1\1\115\1\116\1\117\12\37\4\1\1\120\17"+
    "\37\2\1\1\121\41\37\2\1\1\122\1\123\3\37\1\124\27\1\1\125\2\1\1\126\45\37"+
    "\1\127\1\130\1\131\11\37\1\132\24\37\1\133\1\134\1\37\1\135\1\136\1\137\1"+
    "\140\2\37\1\141\5\37\1\142\7\37\1\143\1\144\4\37\1\145\2\37\1\146\16\37\246"+
    "\1\1\147\20\1\1\150\1\151\25\1\1\152\34\153\1\154\14\37\2\1\1\155\u0b05\37"+
    "\1\156\1\157\u02fe\37");

  /* The ZZ_CMAP_Y table has 7168 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\5\14\1\15\1\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\0\1\27\6\0\1\30\1\31\1\32\1\33\1"+
    "\3\1\34\1\32\1\3\5\14\1\35\7\14\1\35\162\14\1\36\1\37\2\14\1\36\3\3\1\14\1"+
    "\40\1\3\1\41\4\3\34\42\1\14\1\43\1\37\1\44\1\3\1\32\1\35\1\43\4\14\1\44\24"+
    "\14\1\44\42\14\1\45\1\42\1\46\51\14\1\47\10\14\1\35\1\34\1\3\1\47\11\14\1"+
    "\3\1\50\1\51\12\42\1\52\1\53\1\52\2\3\6\14\1\35\1\3\1\35\3\3\1\0\1\54\1\50"+
    "\1\3\2\42\1\55\1\56\12\14\1\57\5\42\2\10\1\60\1\37\1\61\30\14\1\62\1\42\1"+
    "\63\1\42\1\64\1\65\1\66\2\10\1\67\1\70\3\3\1\71\1\72\7\14\6\42\1\55\1\47\25"+
    "\14\1\73\2\42\1\74\3\3\2\10\1\67\7\14\1\57\2\42\1\36\1\32\1\3\5\14\1\73\1"+
    "\75\2\42\2\76\1\77\4\3\6\14\1\76\1\3\2\100\1\101\15\3\5\14\1\43\1\14\1\36"+
    "\5\3\3\42\1\102\10\42\15\14\1\73\1\103\4\42\1\76\1\42\2\14\1\73\1\104\2\10"+
    "\1\47\3\14\1\76\1\47\1\14\2\70\5\14\1\43\1\14\1\41\1\37\1\36\1\103\1\42\2"+
    "\105\1\106\1\3\1\107\1\3\1\44\1\73\1\104\2\10\1\110\1\3\1\50\1\111\1\51\1"+
    "\47\1\35\1\112\1\70\5\14\1\43\1\14\1\43\1\113\1\36\1\65\1\55\1\107\1\105\1"+
    "\77\1\114\1\3\1\47\1\41\1\3\1\104\2\10\1\66\1\115\2\3\1\51\1\47\1\14\2\44"+
    "\5\14\1\43\1\14\1\43\1\47\1\36\1\103\1\42\2\52\1\77\1\40\3\3\1\73\1\104\2"+
    "\10\1\116\1\3\1\117\1\0\1\51\1\47\1\14\2\70\5\14\1\43\1\14\1\43\1\47\1\36"+
    "\1\103\1\42\2\105\1\77\1\3\1\120\1\3\1\44\1\73\1\104\2\10\1\34\3\3\1\121\1"+
    "\47\1\35\1\37\1\43\1\36\1\113\1\43\1\112\1\40\1\35\1\37\2\14\1\36\1\120\1"+
    "\55\1\120\1\65\1\77\1\40\1\107\3\3\1\104\2\10\2\3\1\116\1\3\1\42\1\47\1\14"+
    "\2\43\5\14\1\43\3\14\1\36\1\62\1\42\2\65\1\77\1\3\1\53\1\35\1\3\1\73\1\104"+
    "\2\10\4\3\1\76\1\47\1\14\2\43\5\14\1\43\2\14\1\47\1\36\1\103\1\42\2\65\1\77"+
    "\1\3\1\53\1\3\1\32\1\73\1\104\2\10\1\113\3\3\1\122\1\47\1\14\2\43\11\14\1"+
    "\123\1\124\1\42\2\65\1\106\1\3\1\57\1\3\1\112\1\73\1\104\2\10\2\3\1\37\1\14"+
    "\1\120\1\47\3\14\1\35\1\37\5\14\1\44\2\14\1\34\1\14\1\35\1\125\1\107\1\42"+
    "\1\126\2\42\1\3\1\104\2\10\1\120\3\3\1\47\13\14\1\72\1\42\1\55\1\50\1\14\1"+
    "\57\1\42\1\55\2\10\1\60\11\3\1\113\1\70\1\41\1\34\1\3\1\14\1\47\1\14\1\47"+
    "\1\127\1\37\1\47\1\72\1\42\1\52\1\74\1\14\1\41\1\42\1\77\2\10\1\60\1\14\10"+
    "\3\1\40\5\3\1\77\1\3\2\10\1\60\2\3\1\130\1\114\1\120\2\14\1\47\10\14\1\40"+
    "\1\51\4\42\1\65\1\14\1\76\2\42\1\51\10\42\1\131\1\3\1\125\16\3\12\14\1\57"+
    "\4\42\1\132\2\10\1\60\1\3\1\14\1\73\1\66\1\73\1\103\1\64\1\42\1\66\1\76\1"+
    "\61\2\14\1\73\2\42\1\75\2\10\1\133\1\77\11\14\1\44\1\3\1\34\12\14\1\35\23"+
    "\14\1\43\1\36\1\14\1\35\1\43\1\36\12\14\1\43\1\36\10\14\1\43\1\36\1\14\1\35"+
    "\1\43\1\36\3\14\1\35\16\14\1\43\1\36\20\14\1\35\1\51\10\3\4\14\4\3\25\14\1"+
    "\36\1\14\1\36\1\47\132\14\1\70\4\14\1\134\5\14\1\35\1\3\22\14\1\35\1\37\2"+
    "\14\1\40\1\3\3\14\1\43\1\73\1\131\2\3\4\14\1\73\1\131\2\3\4\14\1\73\3\3\3"+
    "\14\1\43\1\135\3\3\15\14\10\42\1\112\1\50\1\115\2\10\1\60\7\3\1\107\1\136"+
    "\2\10\1\60\1\3\26\14\2\3\1\14\1\137\10\14\1\140\1\3\21\14\1\36\2\3\7\14\1"+
    "\35\3\42\1\3\3\42\2\3\1\104\2\10\7\14\1\36\1\14\1\40\2\3\13\14\1\3\6\14\1"+
    "\36\1\3\2\10\1\60\11\3\5\14\1\57\1\42\1\3\15\14\1\76\1\42\1\55\7\42\1\105"+
    "\2\10\1\60\1\3\2\10\1\60\2\3\1\112\2\3\3\42\1\141\20\3\1\42\1\61\13\14\4\42"+
    "\1\61\1\14\1\3\2\10\1\60\3\3\1\107\2\42\3\3\1\132\7\14\1\76\2\42\1\66\2\10"+
    "\1\67\12\14\1\73\3\42\3\3\11\14\5\42\2\3\2\10\1\60\1\47\2\10\1\67\10\14\1"+
    "\36\2\14\1\40\21\3\1\55\5\42\1\61\1\72\1\73\1\142\1\77\1\3\60\14\15\42\1\143"+
    "\1\144\1\42\5\14\1\36\1\14\1\36\11\14\1\36\1\14\1\36\2\14\2\127\7\14\1\36"+
    "\15\14\1\43\1\14\1\41\1\37\1\43\1\14\1\40\1\14\1\37\1\14\1\3\3\14\1\40\1\37"+
    "\1\43\1\14\1\40\2\145\1\146\1\0\6\3\1\147\1\150\3\3\1\112\1\40\4\3\1\40\1"+
    "\3\1\151\1\0\1\152\2\0\1\34\2\3\1\112\4\3\3\14\1\40\10\100\4\3\3\42\1\153"+
    "\1\154\1\155\2\42\1\131\3\3\1\32\1\112\1\37\2\14\1\34\1\47\1\36\1\3\1\41\1"+
    "\43\1\44\2\14\1\36\1\14\1\3\1\47\1\36\1\32\4\3\12\14\1\40\212\3\1\156\14\157"+
    "\1\160\5\3\13\14\1\35\13\14\1\35\41\14\1\40\1\112\1\57\1\66\3\3\11\14\1\44"+
    "\1\3\1\34\16\14\1\3\1\112\3\3\1\107\5\14\1\35\2\3\1\14\1\35\1\14\1\35\1\14"+
    "\1\35\1\14\1\35\1\14\1\35\1\14\1\35\1\14\1\35\1\14\1\35\10\42\13\3\1\112\64"+
    "\3\1\161\1\47\6\3\1\47\1\14\1\73\1\42\1\47\1\36\1\14\1\40\1\47\24\14\1\35"+
    "\1\53\2\47\25\14\1\35\1\14\1\3\1\47\11\14\1\162\1\47\26\14\1\35\4\3\6\14\1"+
    "\35\15\3\61\14\1\36\22\3\65\14\1\110\4\100\1\101\5\3\43\14\1\40\20\3\13\14"+
    "\1\36\3\14\1\40\4\14\2\10\1\67\5\3\13\14\1\57\1\163\2\42\1\164\7\14\1\73\24"+
    "\14\1\77\10\3\1\112\2\14\1\37\31\14\1\70\10\14\1\35\2\14\17\3\1\112\2\14\2"+
    "\165\1\57\5\14\1\57\1\42\4\3\1\111\1\3\15\14\3\3\1\66\14\14\4\42\1\77\2\3"+
    "\2\10\1\60\1\3\4\42\1\66\1\14\1\112\1\34\2\10\1\67\6\14\1\73\1\42\1\77\5\14"+
    "\1\57\3\42\3\3\7\14\1\40\1\42\13\14\1\57\3\42\1\131\2\3\1\112\2\10\1\60\1"+
    "\3\1\14\1\72\2\14\2\10\1\67\1\35\12\14\1\76\2\42\1\55\2\3\1\57\2\14\1\77\2"+
    "\10\1\60\1\3\5\14\1\35\1\166\1\66\14\14\1\103\1\64\1\61\1\73\1\140\5\3\1\112"+
    "\1\36\2\14\1\57\1\42\1\37\1\167\2\3\1\47\1\35\1\47\1\35\1\47\1\35\2\3\1\14"+
    "\1\35\1\14\1\35\12\14\1\35\2\14\1\36\2\3\34\14\1\57\1\42\1\55\1\77\2\10\1"+
    "\60\1\3\51\14\3\3\5\14\1\35\1\112\14\14\1\3\33\14\1\36\32\14\1\36\11\3\1\14"+
    "\1\35\2\3\1\112\1\14\1\3\1\170\2\14\1\43\2\14\1\35\1\14\1\41\1\44\1\43\32"+
    "\14\1\36\7\3\1\112\32\14\1\36\4\3\20\14\1\37\15\14\12\3\3\14\1\111\4\42\4"+
    "\3\4\42\1\112\1\40\5\3\1\47\6\3\1\116\1\3\1\14\1\43\41\14\1\171\1\3\1\111"+
    "\2\3\2\10\1\60\1\3\1\47\5\14\1\35\1\112\1\47\5\14\1\35\2\3\1\37\25\14\1\35"+
    "\1\37\1\14\1\37\1\14\1\37\1\14\1\37\1\40\1\31\1\172\4\3\1\173\1\3\3\14\1\47"+
    "\5\14\1\35\4\14\1\35\1\44\3\14\1\36\3\14\1\36\10\3\36\14\1\35\21\3\15\14\1"+
    "\40\41\3\1\114\40\3\7\14\1\40\14\14\1\40\3\3\1\131\7\3\10\14\3\3\1\174\6\14"+
    "\1\35\1\3\11\14\1\73\1\55\1\3\7\14\1\36\11\14\1\3\2\14\1\47\1\36\12\3\47\14"+
    "\1\36\2\10\1\60\1\3\11\14\1\3\11\14\1\3\12\14\2\3\15\14\47\3\15\14\1\35\2"+
    "\3\5\14\1\36\2\3\2\14\46\3\1\14\1\36\1\43\12\14\1\44\1\40\1\70\5\14\1\36\2"+
    "\3\5\14\1\35\2\3\7\14\1\35\20\3\4\14\1\35\1\36\2\3\5\14\1\36\2\3\6\14\1\36"+
    "\21\3\16\14\1\3\1\37\20\3\1\76\1\53\1\3\1\42\1\14\2\47\6\14\1\3\1\55\1\107"+
    "\10\3\7\14\1\40\7\14\1\40\10\3\2\14\1\47\6\14\1\167\6\3\15\14\1\36\2\3\5\14"+
    "\1\36\2\3\4\14\1\35\3\3\4\14\1\36\33\3\22\14\1\40\15\3\14\14\1\35\3\3\14\14"+
    "\1\35\3\3\1\132\15\14\3\42\1\55\7\3\1\104\2\10\3\3\1\107\1\132\13\14\2\42"+
    "\1\55\1\33\4\3\6\14\1\40\1\3\2\10\1\60\1\3\1\132\10\14\1\57\3\42\1\175\2\10"+
    "\4\3\10\14\1\57\1\32\2\3\1\132\13\14\1\57\3\42\1\61\1\40\1\120\1\131\2\10"+
    "\1\176\1\40\10\3\4\14\1\44\6\14\3\42\1\3\1\125\20\3\1\14\1\35\1\43\1\44\3"+
    "\14\1\44\2\14\1\40\1\3\13\14\1\57\2\42\1\55\1\3\2\10\1\60\1\3\1\42\1\47\1"+
    "\14\2\70\5\14\1\43\1\14\1\43\1\47\1\36\1\103\1\42\2\105\1\77\1\40\1\107\1"+
    "\3\1\47\1\73\1\120\1\42\1\131\1\42\1\131\42\3\15\14\1\76\3\42\1\132\1\35\1"+
    "\3\2\10\1\60\11\3\14\14\5\42\1\44\2\3\2\10\1\60\51\3\13\14\1\57\1\42\1\77"+
    "\2\42\1\131\5\3\1\14\1\77\10\3\14\14\4\42\1\131\1\40\2\3\2\10\1\60\11\3\12"+
    "\14\1\57\3\42\2\3\2\10\1\60\15\3\6\14\1\36\1\51\3\42\1\3\2\10\1\60\131\3\20"+
    "\14\2\10\1\60\4\3\1\112\1\177\1\0\1\200\11\100\1\201\1\0\1\202\1\203\1\3\1"+
    "\71\2\3\1\177\2\0\12\100\1\204\1\205\3\0\1\54\11\3\16\14\1\40\1\3\2\14\1\43"+
    "\10\14\1\57\1\42\1\55\2\42\1\40\3\3\2\10\1\60\5\3\1\37\7\14\1\120\5\42\1\51"+
    "\2\42\1\55\22\3\1\100\1\101\1\206\11\100\1\177\1\203\1\207\1\210\1\0\1\202"+
    "\2\3\2\0\1\54\51\3\46\14\1\36\31\3\33\14\1\35\4\3\61\14\57\3\13\14\1\35\64"+
    "\3\21\14\1\35\56\3\16\14\1\40\1\3\7\14\1\35\2\10\1\60\31\3\7\14\1\36\1\42"+
    "\1\131\2\3\14\14\1\42\1\55\2\3\1\14\3\3\2\10\1\60\1\3\1\112\5\14\1\3\1\47"+
    "\4\14\34\3\21\14\1\40\2\3\1\76\12\42\1\55\3\3\1\107\1\132\3\14\20\3\1\211"+
    "\7\3\73\14\1\40\4\3\74\14\1\35\3\3\1\110\106\100\1\101\24\3\143\100\1\3\32"+
    "\14\1\35\1\3\3\14\1\40\2\14\1\40\1\3\2\14\1\36\1\53\1\0\60\3\1\51\1\77\1\51"+
    "\1\212\1\0\1\213\1\42\1\55\1\51\1\42\7\3\1\120\1\77\44\3\1\120\1\131\56\3"+
    "\25\14\1\43\21\14\1\43\1\32\1\113\1\47\1\43\2\14\1\44\1\47\1\14\1\47\17\14"+
    "\1\44\1\35\1\47\1\14\1\43\1\14\1\43\6\14\1\44\1\35\1\14\1\41\1\37\1\14\1\43"+
    "\124\14\1\36\6\14\1\43\5\14\1\35\7\14\1\35\6\14\1\43\7\14\1\43\5\14\1\35\7"+
    "\14\1\35\6\14\1\43\7\14\1\43\5\14\1\35\2\14\1\104\14\10\15\42\1\55\1\107\14"+
    "\42\1\131\1\3\1\114\3\3\1\131\4\3\1\107\1\42\1\51\3\42\24\3\1\42\1\55\4\42"+
    "\1\105\1\42\1\52\1\65\1\55\65\3\61\14\1\40\2\3\1\42\1\55\12\3\21\14\1\42\1"+
    "\55\1\3\2\10\1\60\51\3\1\14\1\47\6\14\1\113\1\70\1\47\1\14\1\35\1\14\1\127"+
    "\1\3\1\32\1\112\1\127\1\47\1\113\1\70\2\127\1\113\1\70\1\35\1\14\1\35\1\14"+
    "\1\47\1\41\2\14\1\44\4\14\1\3\2\47\1\44\4\14\35\3\6\157\1\160\1\3\6\157\1"+
    "\160\1\3\6\157\1\160\35\3\65\14\1\35\12\3\15\14\1\40\2\3\67\14\1\36\140\14"+
    "\1\36\3\3\214\100\1\111\7\3\7\14\1\36\70\3\1\33\7\3\30\0\40\3\74\42\4\3");

  /* The ZZ_CMAP_A table has 560 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\14\1\1\1\11\2\1\1\11\2\14\4\0\1\1\1\25\1\7\1\10\1\12\1\64\1\0\1\5\1\30"+
    "\1\31\1\20\1\0\1\34\1\2\1\35\1\4\6\22\1\33\1\32\1\21\1\0\1\23\1\17\1\24\12"+
    "\13\1\65\1\6\1\66\1\0\1\13\1\0\1\52\1\61\1\40\1\43\1\44\1\62\1\56\1\54\1\36"+
    "\1\3\1\55\1\41\1\57\1\37\1\51\1\47\1\3\1\46\1\45\1\50\1\42\1\70\1\53\1\63"+
    "\1\67\1\60\1\26\1\0\1\27\1\0\2\14\1\15\2\14\1\1\1\0\4\12\4\0\1\13\2\0\1\14"+
    "\3\0\1\13\2\0\3\13\1\0\2\13\4\0\3\13\3\0\1\13\1\0\1\13\1\0\4\16\1\13\1\0\4"+
    "\13\1\0\3\13\1\0\1\16\2\4\2\13\1\0\3\13\3\0\1\12\1\0\5\16\1\0\1\16\1\0\2\16"+
    "\1\0\2\14\2\0\3\16\1\0\1\14\3\0\3\13\1\16\2\22\2\0\1\16\3\13\1\0\1\13\3\16"+
    "\1\14\1\0\2\16\2\13\2\16\1\0\4\16\2\13\2\22\3\13\2\0\1\13\3\0\1\14\1\13\1"+
    "\16\4\13\3\16\1\13\2\0\2\16\1\13\1\16\1\13\5\16\2\0\7\12\1\0\2\16\1\14\2\16"+
    "\1\13\2\16\2\0\2\22\1\16\2\0\3\16\1\13\4\0\1\16\2\13\3\12\6\0\1\13\1\0\2\13"+
    "\2\0\1\16\2\0\1\13\1\16\3\0\1\12\3\0\1\13\2\14\2\0\2\16\2\0\1\16\1\13\1\14"+
    "\3\16\3\13\2\14\1\13\2\16\2\0\1\16\1\0\1\16\1\0\1\16\2\0\1\13\1\0\1\13\1\0"+
    "\1\16\1\0\2\16\3\0\3\16\1\13\2\22\2\16\1\1\4\13\1\0\4\16\1\14\1\0\1\13\2\16"+
    "\2\13\1\16\1\13\1\0\2\16\1\4\1\0\1\16\2\13\1\14\2\16\4\14\1\0\1\16\7\1\1\14"+
    "\2\1\5\14\1\1\3\0\1\1\1\14\1\0\2\14\1\16\4\4\1\16\3\4\3\16\2\0\10\4\2\0\1"+
    "\1\3\0\2\13\1\12\1\0\3\4\1\0\2\16\1\0\3\13\1\16\1\13\2\0\1\13\1\16\1\13\2"+
    "\16\2\0\1\13\1\16\2\13\2\0\1\14\1\0\2\12\2\0\3\14\1\0\3\12\1\16\1\0\4\22\1"+
    "\13\1\0\1\12\6\14\4\12\3\14\1\12\4\14\3\0\4\12\2\14\2\12\1\0\1\12\2\0\1\14"+
    "\1\0\2\14\1\0\1\14\1\13\1\12\2\0\3\16\4\14\1\16");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\1\1\3\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\1\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\6\5\1\11"+
    "\1\1\1\23\1\22\13\5\1\24\1\25\1\26\1\5"+
    "\2\27\1\30\1\31\1\11\1\32\1\33\1\34\1\22"+
    "\6\27\1\35\1\36\1\37\1\40\1\41\1\10\1\0"+
    "\1\42\1\6\1\7\1\43\1\10\1\44\1\0\10\5"+
    "\1\44\5\0\17\5\1\41\1\45\1\30\1\31\1\46"+
    "\1\44\7\27\1\47\1\36\1\37\1\50\1\42\1\43"+
    "\10\5\1\51\4\0\1\52\1\53\21\5\1\45\1\46"+
    "\10\27\1\47\1\50\3\5\1\54\4\5\4\0\1\5"+
    "\1\55\1\56\13\5\1\57\1\5\1\60\1\5\3\27"+
    "\1\61\4\27\2\5\1\62\3\5\1\63\4\0\4\5"+
    "\1\64\7\5\1\65\1\5\2\27\1\66\3\27\1\67"+
    "\3\5\1\70\1\5\1\71\3\0\1\72\1\73\1\5"+
    "\1\74\2\5\1\75\5\5\2\27\1\76\3\27\2\5"+
    "\1\77\1\5\3\0\3\5\1\100\2\5\1\101\1\5"+
    "\6\27\2\5\1\102\1\103\1\0\1\104\1\105\4\5"+
    "\1\106\6\27\1\107\1\110\1\5\1\111\1\5\1\112"+
    "\1\113\1\114\2\27\1\115\3\27\1\116\1\5\5\27"+
    "\1\5\1\117\4\27\1\120\11\27\1\121\7\27\1\122"+
    "\1\27\1\123\6\27\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u011d\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d"+
    "\0\u011d\0\u011d\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u011d\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u011d"+
    "\0\u011d\0\u011d\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921"+
    "\0\u011d\0\u011d\0\u011d\0\u0876\0\u095a\0\u0993\0\u09cc\0\u0a05"+
    "\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u018f\0\u0201\0\u0b5b"+
    "\0\u0357\0\u011d\0\u0b94\0\u0bcd\0\u011d\0\u0c06\0\u02e5\0\u0c3f"+
    "\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07"+
    "\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf"+
    "\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197"+
    "\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u083d\0\u011d\0\u12ed"+
    "\0\u1326\0\u011d\0\u0876\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443"+
    "\0\u147c\0\u14b5\0\u011d\0\u14ee\0\u1527\0\u011d\0\u0273\0\u02ac"+
    "\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef"+
    "\0\u011d\0\u1728\0\u1761\0\u179a\0\u17d3\0\u011d\0\u023a\0\u180c"+
    "\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c"+
    "\0\u08af\0\u08e8\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2"+
    "\0\u1d2b\0\u1d64\0\u0ae9\0\u0b22\0\u1d9d\0\u1dd6\0\u1e0f\0\u023a"+
    "\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7"+
    "\0\u2010\0\u023a\0\u023a\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d"+
    "\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u023a\0\u22bc"+
    "\0\u023a\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u0876\0\u23d9\0\u2412"+
    "\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u023a\0\u252f\0\u2568\0\u25a1"+
    "\0\u023a\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730"+
    "\0\u2769\0\u023a\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf"+
    "\0\u28f8\0\u023a\0\u2931\0\u296a\0\u29a3\0\u0876\0\u29dc\0\u2a15"+
    "\0\u2a4e\0\u0876\0\u2a87\0\u2ac0\0\u2af9\0\u023a\0\u2b32\0\u011d"+
    "\0\u2b6b\0\u2ba4\0\u2bdd\0\u023a\0\u023a\0\u2c16\0\u023a\0\u2c4f"+
    "\0\u2c88\0\u023a\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde"+
    "\0\u2e17\0\u0876\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u023a"+
    "\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3\0\u023a"+
    "\0\u30fc\0\u3135\0\u023a\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252"+
    "\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u023a\0\u011d\0\u336f\0\u011d"+
    "\0\u023a\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u023a\0\u348c\0\u34c5"+
    "\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u0876\0\u023a\0\u35e2\0\u011d"+
    "\0\u361b\0\u023a\0\u023a\0\u023a\0\u3654\0\u368d\0\u0876\0\u36c6"+
    "\0\u36ff\0\u3738\0\u023a\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855"+
    "\0\u388e\0\u38c7\0\u0876\0\u3900\0\u3939\0\u3972\0\u39ab\0\u023a"+
    "\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73"+
    "\0\u3bac\0\u0876\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u3d02"+
    "\0\u3d3b\0\u0876\0\u3d74\0\u0876\0\u3dad\0\u3de6\0\u3e1f\0\u3e58"+
    "\0\u3e91\0\u3eca\0\u0876";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\5\6\1\11\1\7\3\6\1\7"+
    "\6\6\1\12\45\6\1\7\1\13\1\14\1\6\1\15"+
    "\1\6\1\16\1\11\1\7\2\14\1\6\1\7\1\6"+
    "\1\17\1\20\1\21\2\6\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\6\1\31\1\32\1\33\1\14"+
    "\1\34\3\14\1\35\2\14\1\36\2\14\1\37\7\14"+
    "\1\40\1\14\3\6\2\14\1\6\1\7\1\6\1\14"+
    "\1\6\1\15\1\6\1\16\1\11\1\7\2\14\1\6"+
    "\1\7\1\6\1\17\1\41\1\42\2\6\1\22\1\23"+
    "\1\43\1\25\1\26\1\27\1\30\1\6\1\31\1\44"+
    "\1\45\1\46\1\47\1\50\1\14\1\51\1\14\1\52"+
    "\1\53\1\54\1\55\1\14\1\37\6\14\1\56\1\57"+
    "\1\14\1\60\1\61\1\62\1\14\1\63\1\6\1\7"+
    "\1\64\2\65\1\66\1\6\1\67\1\11\1\7\1\6"+
    "\1\65\1\6\1\7\2\65\1\70\3\65\1\71\1\23"+
    "\1\24\1\72\1\26\1\27\1\30\1\73\1\31\1\74"+
    "\1\75\1\65\1\76\3\65\1\77\2\65\1\100\2\65"+
    "\1\101\7\65\1\102\1\65\3\6\2\65\2\6\3\103"+
    "\1\104\1\6\1\105\3\6\1\103\2\6\6\103\11\6"+
    "\27\103\3\6\2\103\72\0\1\7\7\0\1\7\3\0"+
    "\1\7\56\0\1\106\32\0\26\106\3\0\2\106\11\11"+
    "\1\0\57\11\3\0\1\107\32\0\26\107\3\0\2\107"+
    "\3\0\1\14\6\0\5\14\1\17\1\110\1\111\1\14"+
    "\13\0\26\14\3\0\2\14\5\15\1\112\1\113\62\15"+
    "\6\16\1\114\1\115\61\16\3\0\1\116\6\0\5\116"+
    "\3\0\1\116\13\0\26\116\3\0\2\116\3\0\1\116"+
    "\6\0\5\116\1\0\1\117\1\0\1\116\13\0\26\116"+
    "\3\0\2\116\22\0\1\120\51\0\1\14\6\0\5\14"+
    "\1\17\1\110\1\111\1\14\13\0\1\14\1\121\17\14"+
    "\1\122\4\14\3\0\2\14\3\0\1\14\6\0\5\14"+
    "\1\17\1\110\1\111\1\14\13\0\3\14\1\123\22\14"+
    "\3\0\2\14\3\0\1\14\6\0\5\14\1\17\1\110"+
    "\1\111\1\14\13\0\1\14\1\124\23\14\1\125\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\4\14\1\126\21\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\23\14\1\127\2\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\1\130\25\14"+
    "\3\0\2\14\3\0\1\116\6\0\5\116\1\0\1\131"+
    "\1\0\1\116\13\0\26\116\3\0\2\116\22\0\1\120"+
    "\13\0\1\132\1\0\1\133\16\0\1\134\2\0\1\135"+
    "\43\0\1\136\36\0\1\14\6\0\5\14\1\17\1\110"+
    "\1\111\1\14\13\0\1\14\1\137\24\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\17\1\110\1\111\1\14"+
    "\13\0\14\14\1\140\11\14\3\0\2\14\3\0\1\14"+
    "\6\0\5\14\1\17\1\110\1\111\1\14\13\0\16\14"+
    "\1\141\7\14\3\0\2\14\3\0\1\14\6\0\5\14"+
    "\1\17\1\110\1\111\1\14\13\0\13\14\1\142\12\14"+
    "\3\0\2\14\3\0\1\14\6\0\5\14\1\17\1\110"+
    "\1\111\1\14\13\0\13\14\1\143\12\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\17\1\110\1\111\1\14"+
    "\13\0\12\14\1\144\3\14\1\145\7\14\3\0\1\146"+
    "\1\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\6\14\1\147\17\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\4\14\1\126\3\14\1\150\15\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\10\14\1\151\15\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\13\14\1\152"+
    "\12\14\3\0\1\153\1\14\3\0\1\14\6\0\5\14"+
    "\1\17\1\110\1\111\1\14\13\0\1\130\2\14\1\154"+
    "\22\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\13\14\1\155\12\14\3\0"+
    "\2\14\2\0\1\65\1\156\1\65\6\0\1\65\2\0"+
    "\6\65\11\0\1\65\26\156\3\0\2\156\2\0\3\65"+
    "\6\0\1\65\2\0\6\65\11\0\27\65\3\0\2\65"+
    "\5\66\1\157\1\160\62\66\6\67\1\161\1\162\61\67"+
    "\2\0\3\65\6\0\1\65\2\0\2\65\1\163\3\65"+
    "\11\0\27\65\3\0\2\65\2\0\3\65\6\0\1\65"+
    "\2\0\6\65\11\0\2\65\1\164\24\65\3\0\2\65"+
    "\2\0\3\65\6\0\1\65\2\0\6\65\11\0\4\65"+
    "\1\165\22\65\3\0\2\65\2\0\3\65\6\0\1\65"+
    "\2\0\6\65\11\0\2\65\1\166\24\65\3\0\2\65"+
    "\2\0\3\65\6\0\1\65\2\0\6\65\11\0\5\65"+
    "\1\167\21\65\3\0\2\65\2\0\3\65\6\0\1\65"+
    "\2\0\6\65\11\0\4\65\1\170\17\65\1\171\2\65"+
    "\3\0\2\65\2\0\3\65\6\0\1\65\2\0\6\65"+
    "\11\0\1\65\1\172\25\65\3\0\2\65\2\0\3\103"+
    "\6\0\1\103\2\0\6\103\11\0\27\103\3\0\2\103"+
    "\5\104\1\173\1\174\62\104\6\105\1\175\1\176\61\105"+
    "\3\0\1\116\6\0\5\116\1\0\1\17\1\0\1\116"+
    "\13\0\26\116\3\0\2\116\5\15\1\177\1\113\62\15"+
    "\6\16\1\114\1\200\61\16\3\0\1\116\6\0\5\116"+
    "\1\17\1\110\1\111\1\116\13\0\26\116\3\0\2\116"+
    "\22\0\1\120\1\17\50\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\12\14\1\201\13\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\11\14\1\202\14\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\14\14\1\203\11\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\4\14\1\204"+
    "\21\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\12\14\1\205\13\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\23\14\1\206\2\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\7\14\1\207\16\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\1\14\1\210"+
    "\24\14\3\0\2\14\3\0\1\116\6\0\5\116\1\0"+
    "\1\211\1\0\1\116\13\0\26\116\3\0\2\116\37\0"+
    "\1\212\72\0\1\213\73\0\1\214\62\0\1\215\67\0"+
    "\1\216\36\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\12\14\1\217\13\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\12\14\1\220\13\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\14\14\1\221"+
    "\11\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\1\14\1\222\24\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\4\14\1\223\21\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\10\14\1\224\3\14\1\225\11\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\13\14\1\226\12\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\1\14\1\227"+
    "\24\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\12\14\1\230\13\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\1\231\12\14\1\232\12\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\17\1\110\1\111\1\14"+
    "\13\0\14\14\1\233\11\14\3\0\2\14\3\0\1\14"+
    "\6\0\5\14\1\17\1\110\1\111\1\14\13\0\13\14"+
    "\1\234\12\14\3\0\2\14\3\0\1\14\6\0\5\14"+
    "\1\17\1\110\1\111\1\14\13\0\12\14\1\235\13\14"+
    "\3\0\2\14\3\0\1\14\6\0\5\14\1\17\1\110"+
    "\1\111\1\14\13\0\13\14\1\236\12\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\17\1\110\1\111\1\14"+
    "\13\0\1\237\2\14\1\240\22\14\3\0\2\14\5\66"+
    "\1\241\1\160\62\66\6\67\1\161\1\242\61\67\2\0"+
    "\3\65\6\0\1\65\2\0\6\65\11\0\3\65\1\243"+
    "\7\65\1\244\13\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\15\65\1\245\11\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\5\65\1\246\21\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\24\65\1\247\2\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\4\65\1\250\22\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\10\65\1\251\16\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\2\65\1\252\24\65\3\0\2\65\5\104\1\253\1\174"+
    "\62\104\6\105\1\175\1\254\61\105\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\6\14\1\255"+
    "\17\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\3\14\1\256\22\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\7\14\1\257\16\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\21\14\1\260\4\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\6\14\1\261"+
    "\17\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\3\14\1\262\22\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\12\14\1\263\13\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\14\14\1\264\11\14\3\0\2\14\36\0\1\265\70\0"+
    "\1\266\102\0\1\267\64\0\1\270\27\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\1\271\25\14"+
    "\3\0\2\14\3\0\1\14\6\0\5\14\1\17\1\110"+
    "\1\111\1\14\13\0\10\14\1\272\15\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\17\1\110\1\111\1\14"+
    "\13\0\20\14\1\273\5\14\3\0\2\14\3\0\1\14"+
    "\6\0\5\14\1\17\1\110\1\111\1\14\13\0\23\14"+
    "\1\274\2\14\3\0\2\14\3\0\1\14\6\0\5\14"+
    "\1\17\1\110\1\111\1\14\13\0\1\275\25\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\12\14\1\276\13\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\10\14\1\277\15\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\2\14\1\300"+
    "\7\14\1\301\13\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\4\14\1\302"+
    "\21\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\26\14\3\0\1\14\1\303"+
    "\3\0\1\14\6\0\5\14\1\17\1\110\1\111\1\14"+
    "\13\0\12\14\1\304\13\14\3\0\2\14\3\0\1\14"+
    "\6\0\5\14\1\17\1\110\1\111\1\14\13\0\1\14"+
    "\1\305\24\14\3\0\2\14\3\0\1\14\6\0\5\14"+
    "\1\17\1\110\1\111\1\14\13\0\3\14\1\306\22\14"+
    "\3\0\2\14\3\0\1\14\6\0\5\14\1\17\1\110"+
    "\1\111\1\14\13\0\6\14\1\307\17\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\17\1\110\1\111\1\14"+
    "\13\0\14\14\1\310\11\14\3\0\2\14\3\0\1\14"+
    "\6\0\5\14\1\17\1\110\1\111\1\14\13\0\5\14"+
    "\1\311\20\14\3\0\2\14\3\0\1\14\6\0\5\14"+
    "\1\17\1\110\1\111\1\14\13\0\14\14\1\312\11\14"+
    "\3\0\2\14\2\0\3\65\6\0\1\65\2\0\6\65"+
    "\11\0\4\65\1\313\22\65\3\0\2\65\2\0\3\65"+
    "\6\0\1\65\2\0\6\65\11\0\7\65\1\314\17\65"+
    "\3\0\2\65\2\0\3\65\6\0\1\65\2\0\6\65"+
    "\11\0\10\65\1\315\16\65\3\0\2\65\2\0\3\65"+
    "\6\0\1\65\2\0\6\65\11\0\22\65\1\316\4\65"+
    "\3\0\2\65\2\0\3\65\6\0\1\65\2\0\6\65"+
    "\11\0\4\65\1\317\22\65\3\0\2\65\2\0\3\65"+
    "\6\0\1\65\2\0\6\65\11\0\14\65\1\320\12\65"+
    "\3\0\2\65\2\0\3\65\6\0\1\65\2\0\6\65"+
    "\11\0\13\65\1\321\13\65\3\0\2\65\2\0\3\65"+
    "\6\0\1\65\2\0\6\65\11\0\15\65\1\322\11\65"+
    "\3\0\2\65\3\0\1\14\6\0\5\14\1\17\1\110"+
    "\1\111\1\14\13\0\10\14\1\323\15\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\17\1\110\1\111\1\14"+
    "\13\0\6\14\1\324\17\14\3\0\2\14\3\0\1\14"+
    "\6\0\5\14\1\17\1\110\1\111\1\14\13\0\7\14"+
    "\1\325\16\14\3\0\2\14\3\0\1\14\6\0\5\14"+
    "\1\17\1\110\1\111\1\14\13\0\1\14\1\326\24\14"+
    "\3\0\2\14\3\0\1\14\6\0\5\14\1\17\1\110"+
    "\1\111\1\14\13\0\1\327\25\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\10\14\1\330\15\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\3\14\1\331"+
    "\22\14\3\0\2\14\50\0\1\332\57\0\1\333\105\0"+
    "\1\334\55\0\1\335\32\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\26\14\3\0\1\14\1\336"+
    "\3\0\1\14\6\0\5\14\1\17\1\110\1\111\1\14"+
    "\13\0\3\14\1\337\22\14\3\0\2\14\3\0\1\14"+
    "\6\0\5\14\1\17\1\110\1\111\1\14\13\0\2\14"+
    "\1\340\23\14\3\0\2\14\3\0\1\14\6\0\5\14"+
    "\1\17\1\110\1\111\1\14\13\0\1\341\25\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\12\14\1\342\13\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\16\14\1\343\7\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\16\14\1\344"+
    "\7\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\10\14\1\345\15\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\14\14\1\346\11\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\6\14\1\347\17\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\7\14\1\350"+
    "\16\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\6\14\1\351\17\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\12\14\1\352\13\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\12\14\1\353\13\14\3\0\2\14\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\5\65\1\354\21\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\11\65\1\355\15\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\10\65\1\356\16\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\1\65\1\357\25\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\16\65\1\360\10\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\11\65\1\361\15\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\4\65\1\362\22\65\3\0"+
    "\2\65\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\24\14\1\363\1\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\21\14\1\364\4\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\5\14\1\365"+
    "\20\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\2\14\1\366\23\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\14\14\1\367\11\14\3\0\2\14\23\0"+
    "\1\370\103\0\1\371\103\0\1\372\62\0\1\373\30\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\6\14\1\374\17\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\6\14\1\375"+
    "\17\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\12\14\1\376\13\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\2\14\1\377\23\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\10\14\1\u0100\15\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\6\14\1\u0101"+
    "\17\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\1\14\1\u0102\24\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\12\14\1\u0103\13\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\2\14\1\u0104\23\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\1\u0105\25\14"+
    "\3\0\2\14\3\0\1\14\6\0\5\14\1\17\1\110"+
    "\1\111\1\14\13\0\14\14\1\u0106\11\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\17\1\110\1\111\1\14"+
    "\13\0\1\u0107\25\14\3\0\2\14\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\6\65\1\u0108\20\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\25\65\1\u0109\1\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\3\65\1\u010a\23\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\10\65\1\u010b\3\65\1\u010c\12\65\3\0\2\65\2\0"+
    "\3\65\6\0\1\65\2\0\6\65\11\0\15\65\1\u010d"+
    "\11\65\3\0\2\65\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\14\14\1\u010e\11\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\6\14\1\u010f\17\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\7\14\1\u0110\16\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\2\14\1\u0111"+
    "\23\14\3\0\2\14\50\0\1\u0112\63\0\1\u0113\72\0"+
    "\1\u0114\26\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\24\14\1\u0115\1\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\13\14\1\u0116\12\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\12\14\1\u0117"+
    "\13\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\6\14\1\u0118\17\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\12\14\1\u0119\13\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\6\14\1\u011a\17\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\1\14\1\u011b"+
    "\24\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\3\14\1\u011c\22\14\3\0"+
    "\2\14\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\7\65\1\u011d\17\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\15\65\1\u011e\11\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\17\65\1\u011f\7\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\12\65\1\u0120\11\65\1\u0121"+
    "\2\65\3\0\2\65\2\0\3\65\6\0\1\65\2\0"+
    "\6\65\11\0\3\65\1\u0122\23\65\3\0\2\65\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\2\14\1\u0123\23\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\1\14\1\u0124"+
    "\24\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\12\14\1\u0125\13\14\3\0"+
    "\2\14\23\0\1\u0126\112\0\1\u0127\46\0\1\u0128\50\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\11\14\1\u0129\14\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\1\14\1\u012a"+
    "\24\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\1\u012b\25\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\17\1\110\1\111\1\14"+
    "\13\0\6\14\1\u012c\17\14\3\0\2\14\3\0\1\14"+
    "\6\0\5\14\1\17\1\110\1\111\1\14\13\0\1\14"+
    "\1\u012d\24\14\3\0\2\14\3\0\1\14\6\0\5\14"+
    "\1\17\1\110\1\111\1\14\13\0\6\14\1\u012e\17\14"+
    "\3\0\2\14\2\0\3\65\6\0\1\65\2\0\6\65"+
    "\11\0\3\65\1\u012f\2\65\1\u0130\20\65\3\0\2\65"+
    "\2\0\3\65\6\0\1\65\2\0\6\65\11\0\3\65"+
    "\1\u0131\23\65\3\0\2\65\2\0\3\65\6\0\1\65"+
    "\2\0\6\65\11\0\11\65\1\u0132\15\65\3\0\2\65"+
    "\2\0\3\65\6\0\1\65\2\0\6\65\11\0\13\65"+
    "\1\u0133\13\65\3\0\2\65\2\0\3\65\6\0\1\65"+
    "\2\0\6\65\11\0\25\65\1\u0134\1\65\3\0\2\65"+
    "\2\0\3\65\6\0\1\65\2\0\6\65\11\0\13\65"+
    "\1\u0135\13\65\3\0\2\65\3\0\1\14\6\0\5\14"+
    "\1\17\1\110\1\111\1\14\13\0\6\14\1\u0136\17\14"+
    "\3\0\2\14\3\0\1\14\6\0\5\14\1\17\1\110"+
    "\1\111\1\14\13\0\12\14\1\u0137\13\14\3\0\2\14"+
    "\23\0\1\u0138\50\0\1\14\6\0\5\14\1\17\1\110"+
    "\1\111\1\14\13\0\1\u0139\25\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\2\14\1\u013a\23\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\17\1\110\1\111\1\14\13\0\5\14\1\u013b"+
    "\20\14\3\0\2\14\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\12\14\1\u013c\13\14\3\0"+
    "\2\14\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\14\65\1\u013d\12\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\7\65\1\u013e\17\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\7\65\1\u013f\17\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\1\65\1\u0140\25\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\1\65\1\u0141\25\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\5\65\1\u0142\21\65\3\0"+
    "\2\65\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\7\14\1\u0143\16\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\17\1\110\1\111\1\14\13\0"+
    "\22\14\1\u0144\3\14\3\0\2\14\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\6\65\1\u0145\20\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\10\65\1\u0146\16\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\2\65\1\u0147\24\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\22\65\1\u0148\4\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\10\65\1\u0149\16\65\3\0"+
    "\2\65\3\0\1\14\6\0\5\14\1\17\1\110\1\111"+
    "\1\14\13\0\6\14\1\u014a\17\14\3\0\2\14\2\0"+
    "\3\65\6\0\1\65\2\0\6\65\11\0\7\65\1\u014b"+
    "\17\65\3\0\2\65\2\0\3\65\6\0\1\65\2\0"+
    "\6\65\11\0\3\65\1\u014c\23\65\3\0\2\65\2\0"+
    "\3\65\6\0\1\65\2\0\6\65\11\0\20\65\1\u014d"+
    "\6\65\3\0\2\65\2\0\3\65\6\0\1\65\2\0"+
    "\6\65\11\0\1\65\1\u014e\25\65\3\0\2\65\2\0"+
    "\3\65\6\0\1\65\2\0\6\65\11\0\3\65\1\u014f"+
    "\23\65\3\0\2\65\3\0\1\14\6\0\5\14\1\17"+
    "\1\110\1\111\1\14\13\0\5\14\1\u0150\20\14\3\0"+
    "\2\14\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\11\65\1\u0151\15\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\1\65\1\u0152\25\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\23\65\1\u0153\3\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\15\65\1\u0154\11\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\1\65\1\u0155\25\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\2\65\1\u0156\24\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\15\65\1\u0157\11\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\13\65\1\u0158\13\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\12\65\1\u0159\14\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\21\65\1\u015a\5\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\13\65\1\u015b\13\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\1\65\1\u015c\25\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\13\65\1\u015d\13\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\1\65\1\u015e\25\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\14\65\1\u015f\12\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\14\65\1\u0160\12\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\14\65\1\u0161\12\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\2\65\1\u0162\24\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\11\65\1\u0163\15\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\2\65\1\u0164\24\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\3\65\1\u0165\23\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\4\65\1\u0166\22\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\15\65\1\u0167\11\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\10\65\1\u0168\16\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\10\65\1\u0169\16\65\3\0\2\65\2\0\3\65\6\0"+
    "\1\65\2\0\6\65\11\0\7\65\1\u016a\17\65\3\0"+
    "\2\65\2\0\3\65\6\0\1\65\2\0\6\65\11\0"+
    "\10\65\1\u016b\16\65\3\0\2\65";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16131];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\3\1\1\11\7\1\11\11\10\1\1\11"+
    "\14\1\3\11\6\1\3\11\15\1\1\0\1\11\2\1"+
    "\1\11\2\1\1\0\11\1\5\0\20\1\1\11\2\1"+
    "\1\11\10\1\1\11\2\1\1\11\12\1\1\11\4\0"+
    "\1\11\46\1\4\0\41\1\4\0\32\1\1\11\3\0"+
    "\26\1\3\0\21\1\1\11\1\0\1\11\17\1\1\11"+
    "\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ProguardR8Lexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ProguardR8Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 85: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 86: break;
          case 3: 
            { return LINE_CMT;
            } 
            // fall through
          case 87: break;
          case 4: 
            { yybegin(STATE_FILE_NAME); return AT;
            } 
            // fall through
          case 88: break;
          case 5: 
            { return JAVA_IDENTIFIER;
            } 
            // fall through
          case 89: break;
          case 6: 
            { return UNTERMINATED_SINGLE_QUOTED_CLASS;
            } 
            // fall through
          case 90: break;
          case 7: 
            { return UNTERMINATED_DOUBLE_QUOTED_CLASS;
            } 
            // fall through
          case 91: break;
          case 8: 
            { return JAVA_IDENTIFIER_WITH_WILDCARDS;
            } 
            // fall through
          case 92: break;
          case 9: 
            { return ASTERISK;
            } 
            // fall through
          case 93: break;
          case 10: 
            { return AT;
            } 
            // fall through
          case 94: break;
          case 11: 
            { return EM;
            } 
            // fall through
          case 95: break;
          case 12: 
            { yybegin(STATE_JAVA_SECTION_BODY); return OPEN_BRACE;
            } 
            // fall through
          case 96: break;
          case 13: 
            { yybegin(YYINITIAL); return CLOSE_BRACE;
            } 
            // fall through
          case 97: break;
          case 14: 
            { return LPAREN;
            } 
            // fall through
          case 98: break;
          case 15: 
            { return RPAREN;
            } 
            // fall through
          case 99: break;
          case 16: 
            { return SEMICOLON;
            } 
            // fall through
          case 100: break;
          case 17: 
            { return COMMA;
            } 
            // fall through
          case 101: break;
          case 18: 
            { return DOT;
            } 
            // fall through
          case 102: break;
          case 19: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 103: break;
          case 20: 
            { return ANY_PRIMITIVE_TYPE_;
            } 
            // fall through
          case 104: break;
          case 21: 
            { return OPEN_BRACKET;
            } 
            // fall through
          case 105: break;
          case 22: 
            { return CLOSE_BRACKET;
            } 
            // fall through
          case 106: break;
          case 23: 
            { return FILE_NAME;
            } 
            // fall through
          case 107: break;
          case 24: 
            { return UNTERMINATED_SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 108: break;
          case 25: 
            { return UNTERMINATED_DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 109: break;
          case 26: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return AT;
            } 
            // fall through
          case 110: break;
          case 27: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 111: break;
          case 28: 
            { return COLON;
            } 
            // fall through
          case 112: break;
          case 29: 
            { yybegin(YYINITIAL); return FILE_NAME;
            } 
            // fall through
          case 113: break;
          case 30: 
            { yybegin(YYINITIAL); return UNTERMINATED_SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 114: break;
          case 31: 
            { yybegin(YYINITIAL); return UNTERMINATED_DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 115: break;
          case 32: 
            { yybegin(STATE_FLAG_ARGS); return FLAG_TOKEN;
            } 
            // fall through
          case 116: break;
          case 33: 
            { yypushback(yytext().length()); yybegin(YYINITIAL);
            } 
            // fall through
          case 117: break;
          case 34: 
            { return SINGLE_QUOTED_CLASS;
            } 
            // fall through
          case 118: break;
          case 35: 
            { return DOUBLE_QUOTED_CLASS;
            } 
            // fall through
          case 119: break;
          case 36: 
            { return DOUBLE_ASTERISK;
            } 
            // fall through
          case 120: break;
          case 37: 
            { return SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 121: break;
          case 38: 
            { return DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 122: break;
          case 39: 
            { yybegin(YYINITIAL); return SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 123: break;
          case 40: 
            { yybegin(YYINITIAL); return DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 124: break;
          case 41: 
            { return ANY_TYPE_;
            } 
            // fall through
          case 125: break;
          case 42: 
            { return ANY_TYPE_AND_NUM_OF_ARGS;
            } 
            // fall through
          case 126: break;
          case 43: 
            { return INT;
            } 
            // fall through
          case 127: break;
          case 44: 
            { return ENUM;
            } 
            // fall through
          case 128: break;
          case 45: 
            { return CHAR;
            } 
            // fall through
          case 129: break;
          case 46: 
            { return LONG;
            } 
            // fall through
          case 130: break;
          case 47: 
            { return BYTE;
            } 
            // fall through
          case 131: break;
          case 48: 
            { return VOID;
            } 
            // fall through
          case 132: break;
          case 49: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return ENUM;
            } 
            // fall through
          case 133: break;
          case 50: 
            { return CLASS;
            } 
            // fall through
          case 134: break;
          case 51: 
            { return FINAL;
            } 
            // fall through
          case 135: break;
          case 52: 
            { return SHORT;
            } 
            // fall through
          case 136: break;
          case 53: 
            { return FLOAT;
            } 
            // fall through
          case 137: break;
          case 54: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return CLASS;
            } 
            // fall through
          case 138: break;
          case 55: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return FINAL;
            } 
            // fall through
          case 139: break;
          case 56: 
            { return PUBLIC;
            } 
            // fall through
          case 140: break;
          case 57: 
            { return _INIT_;
            } 
            // fall through
          case 141: break;
          case 58: 
            { return NATIVE;
            } 
            // fall through
          case 142: break;
          case 59: 
            { return DOUBLE;
            } 
            // fall through
          case 143: break;
          case 60: 
            { return STATIC;
            } 
            // fall through
          case 144: break;
          case 61: 
            { return RETURN;
            } 
            // fall through
          case 145: break;
          case 62: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return PUBLIC;
            } 
            // fall through
          case 146: break;
          case 63: 
            { return EXTENDS;
            } 
            // fall through
          case 147: break;
          case 64: 
            { return PRIVATE;
            } 
            // fall through
          case 148: break;
          case 65: 
            { return BOOLEAN;
            } 
            // fall through
          case 149: break;
          case 66: 
            { return ABSTRACT;
            } 
            // fall through
          case 150: break;
          case 67: 
            { return _CLINIT_;
            } 
            // fall through
          case 151: break;
          case 68: 
            { return _FIELDS_;
            } 
            // fall through
          case 152: break;
          case 69: 
            { return STRICTFP;
            } 
            // fall through
          case 153: break;
          case 70: 
            { return VOLATILE;
            } 
            // fall through
          case 154: break;
          case 71: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return ABSTRACT;
            } 
            // fall through
          case 155: break;
          case 72: 
            { return INTERFACE;
            } 
            // fall through
          case 156: break;
          case 73: 
            { return _METHODS_;
            } 
            // fall through
          case 157: break;
          case 74: 
            { return SYNTHETIC;
            } 
            // fall through
          case 158: break;
          case 75: 
            { return PROTECTED;
            } 
            // fall through
          case 159: break;
          case 76: 
            { return TRANSIENT;
            } 
            // fall through
          case 160: break;
          case 77: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return INTERFACE;
            } 
            // fall through
          case 161: break;
          case 78: 
            { return IMPLEMENTS;
            } 
            // fall through
          case 162: break;
          case 79: 
            { return INCLUDECODE;
            } 
            // fall through
          case 163: break;
          case 80: 
            { return SYNCHRONIZED;
            } 
            // fall through
          case 164: break;
          case 81: 
            { return ALLOWSHRINKING;
            } 
            // fall through
          case 165: break;
          case 82: 
            { return ALLOWOBFUSCATION;
            } 
            // fall through
          case 166: break;
          case 83: 
            { return ALLOWOPTIMIZATION;
            } 
            // fall through
          case 167: break;
          case 84: 
            { return INCLUDEDESCRIPTORCLASSES;
            } 
            // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
