/*
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License|Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing|software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND|either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
{
  parserClass="com.android.tools.idea.lang.proguardR8.parser.ProguardR8Parser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiClassPrefix="ProguardR8"
  psiImplClassSuffix="Impl"
  psiPackage="com.android.tools.idea.lang.proguardR8.psi"
  psiImplPackage="com.android.tools.idea.lang.proguardR8.psi.impl"
  psiImplUtilClass="com.android.tools.idea.lang.proguardR8.psi.ProguardR8PsiImplUtil"
  elementTypeHolderClass="com.android.tools.idea.lang.proguardR8.psi.ProguardR8PsiTypes"
  elementTypeClass="com.android.tools.idea.lang.proguardR8.psi.ProguardR8AstNodeType"
  tokenTypeClass="com.android.tools.idea.lang.proguardR8.psi.ProguardR8TokenType"

  classHeader='generatedFilesHeader.txt'

  // Use only for life preview. Actual lexer contains more than one state and can't be generated from bnf file.
  tokens=[
    WS='regexp:\s+'  // White spaces for live preview
    EM = "!" // exclamation mark
    OPEN_BRACE = "{"
    CLOSE_BRACE = "}"
    LPAREN='('
    RPAREN=')'
    SEMICOLON=';'
    COLON = ':'
    COMMA=','
    DOT='.'
    ASTERISK='*'
    DOUBLE_ASTERISK='**'
    AT='@'
    ANY_TYPE_='***'
    ANY_TYPE_AND_NUM_OF_ARGS='...'
    ANY_PRIMITIVE_TYPE_='%'
    OPEN_BRACKET = '['
    CLOSE_BRACKET = ']'

    FLAG_TOKEN = 'regexp:-[a-z]+' // Anything that starts with @ or -
    FILE_NAME = 'regexp:[\w\-./<>*?]+'
    SINGLE_QUOTED_STRING = "regexp:'(\\'|[^'])*'"
    DOUBLE_QUOTED_STRING = 'regexp:"(\\"|[^"])*"'
    UNTERMINATED_SINGLE_QUOTED_STRING = "regexp:'(\\'|[^'])*"
    UNTERMINATED_DOUBLE_QUOTED_STRING = 'regexp:"(\\"|[^"])*'
    LINE_CMT = 'regexp:#[^\n\r]*'     // Line comment, anything that starts with "#".
    JAVA_IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z\d_]*'
    JAVA_IDENTIFIER_WITH_WILDCARDS = 'regexp:(((\?|\*{1,2})?\w+)+(\?|\*{1,2})?)|(\?|\*{1,2})' // Any string from letters and digits
                                              // that can contain "?" symbol (no more than one in row) and "*" (no more than two in row).
  ]

  generate=[names='long' java='8']

  implements("method|field|fully_qualified_name_constructor")="com.android.tools.idea.lang.proguardR8.psi.ProguardR8ClassMember"
}

root ::= (include_file|rule_)*

include_file ::= '@' file {
  recoverWhile=not_flag
  pin=1
}
flag ::= FLAG_TOKEN
private rule_ ::= rule_with_class_specification | rule {recoverWhile=not_flag}
rule ::= flag (flag_argument ("," flag_argument)*)?
rule_with_class_specification ::= flag  ("," keep_option_modifier)* class_specification_header class_specification_body?

file ::= "!"?(FILE_NAME|SINGLE_QUOTED_STRING|DOUBLE_QUOTED_STRING|UNTERMINATED_SINGLE_QUOTED_STRING|UNTERMINATED_DOUBLE_QUOTED_STRING|ASTERISK) {
  methods=[getReferences isQuoted]
}
private file_list ::= file ((':'|';') file)*
file_filter ::= file_list (',' file_list)*
flag_argument ::= file_list ('(' file_filter ')')?

keep_option_modifier ::= includedescriptorclasses|includecode|allowshrinking|allowoptimization|allowobfuscation

private java_keywords_ ::= interface|class|enum|public|final|abstract|static|volatile|transient|synchronized|native|strictfp|boolean|byte|
  char|short|int|long|float|double|void|extends|implements|private|protected

private java_identifier_ ::= (JAVA_IDENTIFIER|JAVA_IDENTIFIER_WITH_WILDCARDS|ASTERISK|DOUBLE_ASTERISK|java_keywords_)

qualifiedName ::= (java_identifier_ ("." java_identifier_)*)|quoted_identifier {
  methods=[getReferences resolveToPsiClass containsWildcards]
  extraRoot=true
}

annotation_name ::= AT qualifiedName
private quoted_identifier ::= SINGLE_QUOTED_CLASS|DOUBLE_QUOTED_CLASS|UNTERMINATED_SINGLE_QUOTED_CLASS|UNTERMINATED_DOUBLE_QUOTED_CLASS
super_class_name ::= "!"? qualifiedName
class_name ::= "!"? qualifiedName
class_member_name ::= java_identifier_ {
  methods=[getReference containsWildcards]
}

java_primitive ::= boolean|byte|char|short|int|long|float|double|void {
  methods=[getPsiPrimitive]
}
any_type ::= ANY_TYPE_
any_primitive_type ::= ANY_PRIMITIVE_TYPE_
any_not_primitive_type ::= DOUBLE_ASTERISK
type ::= any_type|(any_primitive_type|any_not_primitive_type|java_primitive|qualifiedName)array_type? {
  methods=[matchesPsiType]
}
array_type ::= ("[" "]")+ {methods=[getNumberOfDimensions]}

type_list ::= (type ("," type)* ("," ANY_TYPE_AND_NUM_OF_ARGS)?)? {pin(".*")=not_close_brace recoverWhile=not_right_paren}

private java ::= (java_rule ';')* {pin(".*")=1}
java_rule ::= !(<<eof>>|CLOSE_BRACE|WHITE_SPACE) (fields_specification|method_specification) &';' {pin=1 recoverWhile=not_semicolon_or_brace}
class_specification_body ::= OPEN_BRACE java CLOSE_BRACE {pin=1}

class_modifier ::= ("!"?(public|final|abstract))
class_type ::= "!"?(interface|class|enum)

class_specification_header ::= annotation_name? class_modifier* class_type class_name (',' class_name)* ((extends|implements) annotation_name? super_class_name (',' super_class_name)*)? {
  pin=class_type
  recoverWhile=not_open_brace_or_new_flag
  methods=[resolvePsiClasses resolveSuperPsiClasses]
}

private access_modifier ::= public|private|protected

// Let fields_modifier and method_modifier have its elementType.
fake modifier ::= ("!"?(static|volatile|transient|synchronized|native|abstract|strictfp|final|synthetic))|access_modifier {
    methods=[isNegated toPsiModifier isAccessModifier]
}
fields_modifier ::= "!"?(static|volatile|transient|final|access_modifier) !'.' {
  elementType=modifier
  extends=modifier
}
private method_only_modifiers ::= "!"?(synchronized|native|abstract|strictfp)
method_modifier ::= ("!"?(static|final|synthetic|access_modifier)|method_only_modifiers) !'.' {
   elementType=modifier
   extends=modifier
}

/**
 !'.' prevents parsing package part of fully qualified name as class_member_name
 Example:
  -keep MyClass {
    not.classMember
  }
  without !'.' 'not' will be parsed as class_member_name
 */
private class_member_core ::= ((type class_member_name) | class_member_name !(java_identifier_|<fields>|<methods>)) !'.'

field ::= annotation_name? !method_only_modifiers fields_modifier* class_member_core {
  methods=[getParameters]
}
method ::= annotation_name? method_modifier* class_member_core parameters (return values)?

fields_specification ::= (field | (annotation_name? !method_only_modifiers fields_modifier* (<fields>|any_field_or_method))) !parameters

any_field_or_method ::= ASTERISK
parameters ::= LPAREN (ANY_TYPE_AND_NUM_OF_ARGS|type_list) RPAREN {
  pin=1
  methods=[matchesPsiParameterList isAcceptAnyParameters]
}
private init_description ::= (<init>|<clinit>) parameters

/**
  In proguard/R8 constructors can be specified using their full class names.

  Even though [class_name] can contain just one java_identifier_, "java_identifier_()" will never match
  fully_qualified_name_constructor, because it will be consumed by [method] (@see class_member_core) due to parsing priority.
  It means that only fully qualified names will match class_name
 */
constructor_name ::= qualifiedName {
  extends=class_member_name
}
fully_qualified_name_constructor ::= method_modifier* constructor_name parameters {
  pin=2
  methods=[getType]
}

method_specification ::= method | fully_qualified_name_constructor | (annotation_name? method_modifier* (<methods> | init_description | any_field_or_method))

//recover rules
private not_semicolon_or_brace ::= !(SEMICOLON|CLOSE_BRACE)
private not_open_brace_or_new_flag ::= !(OPEN_BRACE|FLAG_TOKEN)
private not_close_brace ::= !CLOSE_BRACE
private not_flag ::= !FLAG_TOKEN
private not_right_paren ::= !RPAREN