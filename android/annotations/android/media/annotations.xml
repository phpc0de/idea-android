<?xml version="1.0" encoding="UTF-8"?>
<root>
  <item name="android.media.AsyncPlayer void play(android.content.Context, android.net.Uri, boolean, android.media.AudioAttributes) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AsyncPlayer void play(android.content.Context, android.net.Uri, boolean, android.media.AudioAttributes) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AsyncPlayer void play(android.content.Context, android.net.Uri, boolean, android.media.AudioAttributes) 3">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioAttributes.Builder android.media.AudioAttributes.Builder setContentType(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioAttributes.CONTENT_TYPE_UNKNOWN, android.media.AudioAttributes.CONTENT_TYPE_SPEECH, android.media.AudioAttributes.CONTENT_TYPE_MUSIC, android.media.AudioAttributes.CONTENT_TYPE_MOVIE, android.media.AudioAttributes.CONTENT_TYPE_SONIFICATION}" />
    </annotation>
  </item>
  <item name="android.media.AudioAttributes.Builder android.media.AudioAttributes.Builder setUsage(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioAttributes.USAGE_UNKNOWN, android.media.AudioAttributes.USAGE_MEDIA, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION_SIGNALLING, android.media.AudioAttributes.USAGE_ALARM, android.media.AudioAttributes.USAGE_NOTIFICATION, android.media.AudioAttributes.USAGE_NOTIFICATION_RINGTONE, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_REQUEST, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_INSTANT, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_DELAYED, android.media.AudioAttributes.USAGE_NOTIFICATION_EVENT, android.media.AudioAttributes.USAGE_ASSISTANCE_ACCESSIBILITY, android.media.AudioAttributes.USAGE_ASSISTANCE_NAVIGATION_GUIDANCE, android.media.AudioAttributes.USAGE_ASSISTANCE_SONIFICATION, android.media.AudioAttributes.USAGE_GAME, android.media.AudioAttributes.USAGE_ASSISTANT}" />
    </annotation>
  </item>
  <item name="android.media.AudioDeviceInfo int[] getChannelCounts()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioDeviceInfo int[] getChannelIndexMasks()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioDeviceInfo int[] getChannelMasks()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioDeviceInfo int[] getEncodings()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioDeviceInfo int[] getSampleRates()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioDeviceInfo java.lang.String getAddress()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioFocusRequest android.media.AudioAttributes getAudioAttributes()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioFocusRequest.Builder Builder(android.media.AudioFocusRequest) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioFocusRequest.Builder android.media.AudioFocusRequest.Builder setAcceptsDelayedFocusGain(boolean)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioFocusRequest.Builder android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioFocusRequest.Builder android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioFocusRequest.Builder android.media.AudioFocusRequest.Builder setFocusGain(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioFocusRequest.Builder android.media.AudioFocusRequest.Builder setForceDucking(boolean)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioFocusRequest.Builder android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioFocusRequest.Builder android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioFocusRequest.Builder android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener, android.os.Handler)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioFocusRequest.Builder android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener, android.os.Handler) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioFocusRequest.Builder android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener, android.os.Handler) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioFocusRequest.Builder android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioFormat.Builder android.media.AudioFormat.Builder setChannelIndexMask(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioFormat.Builder android.media.AudioFormat.Builder setChannelMask(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioFormat.Builder android.media.AudioFormat.Builder setEncoding(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioFormat.ENCODING_DEFAULT, android.media.AudioFormat.ENCODING_PCM_8BIT, android.media.AudioFormat.ENCODING_PCM_16BIT, android.media.AudioFormat.ENCODING_PCM_FLOAT, android.media.AudioFormat.ENCODING_AC3, android.media.AudioFormat.ENCODING_E_AC3, android.media.AudioFormat.ENCODING_E_AC3_JOC, android.media.AudioFormat.ENCODING_DTS, android.media.AudioFormat.ENCODING_DTS_HD, android.media.AudioFormat.ENCODING_IEC61937, android.media.AudioFormat.ENCODING_AAC_HE_V1, android.media.AudioFormat.ENCODING_AAC_HE_V2, android.media.AudioFormat.ENCODING_AAC_LC, android.media.AudioFormat.ENCODING_AAC_ELD, android.media.AudioFormat.ENCODING_AAC_XHE, android.media.AudioFormat.ENCODING_AC4}" />
      <val name="flag" val="false" />
    </annotation>
  </item>
  <item name="android.media.AudioManager">
    <annotation name="android.support.annotation.SystemService">
      <val name="value" val="android.content.Context.AUDIO_SERVICE" />
    </annotation>
  </item>
  <item name="android.media.AudioManager float getStreamVolumeDb(int, int, int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioManager.STREAM_VOICE_CALL, android.media.AudioManager.STREAM_SYSTEM, android.media.AudioManager.STREAM_RING, android.media.AudioManager.STREAM_MUSIC, android.media.AudioManager.STREAM_ALARM, android.media.AudioManager.STREAM_NOTIFICATION, android.media.AudioManager.STREAM_DTMF, android.media.AudioManager.STREAM_ACCESSIBILITY}" />
      <val name="flag" val="false" />
    </annotation>
  </item>
  <item name="android.media.AudioManager float getStreamVolumeDb(int, int, int) 2">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioDeviceInfo.TYPE_BUILTIN_EARPIECE, android.media.AudioDeviceInfo.TYPE_BUILTIN_SPEAKER, android.media.AudioDeviceInfo.TYPE_WIRED_HEADSET, android.media.AudioDeviceInfo.TYPE_WIRED_HEADPHONES, android.media.AudioDeviceInfo.TYPE_BLUETOOTH_SCO, android.media.AudioDeviceInfo.TYPE_BLUETOOTH_A2DP, android.media.AudioDeviceInfo.TYPE_HDMI, android.media.AudioDeviceInfo.TYPE_DOCK, android.media.AudioDeviceInfo.TYPE_USB_ACCESSORY, android.media.AudioDeviceInfo.TYPE_USB_DEVICE, android.media.AudioDeviceInfo.TYPE_USB_HEADSET, android.media.AudioDeviceInfo.TYPE_TELEPHONY, android.media.AudioDeviceInfo.TYPE_LINE_ANALOG, android.media.AudioDeviceInfo.TYPE_HDMI_ARC, android.media.AudioDeviceInfo.TYPE_LINE_DIGITAL, android.media.AudioDeviceInfo.TYPE_FM, android.media.AudioDeviceInfo.TYPE_AUX_LINE, android.media.AudioDeviceInfo.TYPE_IP, android.media.AudioDeviceInfo.TYPE_BUS, android.media.AudioDeviceInfo.TYPE_HEARING_AID}" />
      <val name="flag" val="false" />
    </annotation>
  </item>
  <item name="android.media.AudioManager int abandonAudioFocusRequest(android.media.AudioFocusRequest) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioManager int requestAudioFocus(android.media.AudioFocusRequest) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioManager java.util.List&lt;android.media.AudioPlaybackConfiguration&gt; getActivePlaybackConfigurations()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioManager java.util.List&lt;android.media.AudioRecordingConfiguration&gt; getActiveRecordingConfigurations()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioManager void registerAudioPlaybackCallback(android.media.AudioManager.AudioPlaybackCallback, android.os.Handler) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioManager void registerAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback, android.os.Handler) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioManager void unregisterAudioPlaybackCallback(android.media.AudioManager.AudioPlaybackCallback) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioManager void unregisterAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioPresentation int getMasteringIndication()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioPresentation.MASTERING_NOT_INDICATED, android.media.AudioPresentation.MASTERED_FOR_STEREO, android.media.AudioPresentation.MASTERED_FOR_SURROUND, android.media.AudioPresentation.MASTERED_FOR_3D, android.media.AudioPresentation.MASTERED_FOR_HEADPHONE}" />
    </annotation>
  </item>
  <item name="android.media.AudioRecord android.media.AudioFormat getFormat()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioRecord int getTimestamp(android.media.AudioTimestamp, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioRecord int getTimestamp(android.media.AudioTimestamp, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioTimestamp.TIMEBASE_MONOTONIC, android.media.AudioTimestamp.TIMEBASE_BOOTTIME}" />
    </annotation>
  </item>
  <item name="android.media.AudioRecord int read(byte[], int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioRecord int read(byte[], int, int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioRecord int read(byte[], int, int, int) 3">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioRecord.READ_BLOCKING, android.media.AudioRecord.READ_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioRecord int read(float[], int, int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioRecord int read(float[], int, int, int) 3">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioRecord.READ_BLOCKING, android.media.AudioRecord.READ_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioRecord int read(java.nio.ByteBuffer, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioRecord int read(java.nio.ByteBuffer, int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioRecord int read(java.nio.ByteBuffer, int, int) 2">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioRecord.READ_BLOCKING, android.media.AudioRecord.READ_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioRecord int read(short[], int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioRecord int read(short[], int, int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioRecord int read(short[], int, int, int) 3">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioRecord.READ_BLOCKING, android.media.AudioRecord.READ_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioRecord.Builder android.media.AudioRecord.Builder setAudioFormat(android.media.AudioFormat) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioRecordingConfiguration int getClientAudioSource()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaRecorder.AudioSource.DEFAULT, android.media.MediaRecorder.AudioSource.MIC, android.media.MediaRecorder.AudioSource.VOICE_UPLINK, android.media.MediaRecorder.AudioSource.VOICE_DOWNLINK, android.media.MediaRecorder.AudioSource.VOICE_CALL, android.media.MediaRecorder.AudioSource.CAMCORDER, android.media.MediaRecorder.AudioSource.VOICE_RECOGNITION, android.media.MediaRecorder.AudioSource.VOICE_COMMUNICATION, android.media.MediaRecorder.AudioSource.UNPROCESSED}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack android.media.AudioFormat getFormat()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack android.media.PlaybackParams getPlaybackParams()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper.Configuration)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper.Configuration) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack int getPerformanceMode()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.PERFORMANCE_MODE_NONE, android.media.AudioTrack.PERFORMANCE_MODE_LOW_LATENCY, android.media.AudioTrack.PERFORMANCE_MODE_POWER_SAVING}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int setPresentation(android.media.AudioPresentation) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack int write(byte[], int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack int write(byte[], int, int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack int write(byte[], int, int, int) 3">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.WRITE_BLOCKING, android.media.AudioTrack.WRITE_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int write(float[], int, int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack int write(float[], int, int, int) 3">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.WRITE_BLOCKING, android.media.AudioTrack.WRITE_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int write(java.nio.ByteBuffer, int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack int write(java.nio.ByteBuffer, int, int) 2">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.WRITE_BLOCKING, android.media.AudioTrack.WRITE_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int write(java.nio.ByteBuffer, int, int, long) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack int write(java.nio.ByteBuffer, int, int, long) 2">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.WRITE_BLOCKING, android.media.AudioTrack.WRITE_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int write(short[], int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack int write(short[], int, int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack int write(short[], int, int, int) 3">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.WRITE_BLOCKING, android.media.AudioTrack.WRITE_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack void setPlaybackParams(android.media.PlaybackParams) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack.Builder android.media.AudioTrack build()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setAudioAttributes(android.media.AudioAttributes)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setAudioAttributes(android.media.AudioAttributes) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setAudioFormat(android.media.AudioFormat)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setAudioFormat(android.media.AudioFormat) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setBufferSizeInBytes(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setPerformanceMode(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setPerformanceMode(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.PERFORMANCE_MODE_NONE, android.media.AudioTrack.PERFORMANCE_MODE_LOW_LATENCY, android.media.AudioTrack.PERFORMANCE_MODE_POWER_SAVING}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setSessionId(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setTransferMode(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setTransferMode(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.MODE_STATIC, android.media.AudioTrack.MODE_STREAM}" />
    </annotation>
  </item>
  <item name="android.media.Image android.hardware.HardwareBuffer getHardwareBuffer()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCas void processEmm(byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCas void processEmm(byte[], int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCas void provision(java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCas void refreshEntitlements(int, byte[]) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCas void sendEvent(int, int, byte[]) 2">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCas void setEventListener(android.media.MediaCas.EventListener, android.os.Handler) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCas void setEventListener(android.media.MediaCas.EventListener, android.os.Handler) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCas void setPrivateData(byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCas.EventListener void onEvent(android.media.MediaCas, int, int, byte[]) 3">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCas.PluginDescriptor java.lang.String getName()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCas.Session void processEcm(byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCas.Session void processEcm(byte[], int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCas.Session void setPrivateData(byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCasStateException java.lang.String getDiagnosticInfo()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec android.media.Image getInputImage(int)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec android.media.Image getOutputImage(int)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec android.media.MediaCodec createByCodecName(java.lang.String)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec android.media.MediaCodec createByCodecName(java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec android.media.MediaCodec createDecoderByType(java.lang.String)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec android.media.MediaCodec createDecoderByType(java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec android.media.MediaCodec createEncoderByType(java.lang.String)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec android.media.MediaCodec createEncoderByType(java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec android.media.MediaCodecInfo getCodecInfo()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec android.media.MediaFormat getInputFormat()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec android.media.MediaFormat getOutputFormat()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec android.media.MediaFormat getOutputFormat(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec android.view.Surface createInputSurface()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec android.view.Surface createPersistentInputSurface()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec int dequeueOutputBuffer(android.media.MediaCodec.BufferInfo, long)">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaCodec.INFO_TRY_AGAIN_LATER, android.media.MediaCodec.INFO_OUTPUT_FORMAT_CHANGED, android.media.MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED}" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec int dequeueOutputBuffer(android.media.MediaCodec.BufferInfo, long) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec java.lang.String getName()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec java.nio.ByteBuffer getInputBuffer(int)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec java.nio.ByteBuffer getOutputBuffer(int)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec java.nio.ByteBuffer[] getInputBuffers()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec java.nio.ByteBuffer[] getOutputBuffers()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec void configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec void configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec void configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int) 2">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec void configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int) 3">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaCodec.CONFIGURE_FLAG_ENCODE}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec void configure(android.media.MediaFormat, android.view.Surface, int, android.media.MediaDescrambler) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec void configure(android.media.MediaFormat, android.view.Surface, int, android.media.MediaDescrambler) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec void configure(android.media.MediaFormat, android.view.Surface, int, android.media.MediaDescrambler) 2">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaCodec.CONFIGURE_FLAG_ENCODE}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec void configure(android.media.MediaFormat, android.view.Surface, int, android.media.MediaDescrambler) 3">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec void queueSecureInputBuffer(int, int, android.media.MediaCodec.CryptoInfo, long, int) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec void setCallback(android.media.MediaCodec.Callback) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec void setCallback(android.media.MediaCodec.Callback, android.os.Handler) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec void setCallback(android.media.MediaCodec.Callback, android.os.Handler) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec void setInputSurface(android.view.Surface) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec void setOnFrameRenderedListener(android.media.MediaCodec.OnFrameRenderedListener, android.os.Handler) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec void setOnFrameRenderedListener(android.media.MediaCodec.OnFrameRenderedListener, android.os.Handler) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec void setOutputSurface(android.view.Surface) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec void setParameters(android.os.Bundle) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec void setVideoScalingMode(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT, android.media.MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING}" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec.BufferInfo flags">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaCodec.BUFFER_FLAG_SYNC_FRAME, android.media.MediaCodec.BUFFER_FLAG_KEY_FRAME, android.media.MediaCodec.BUFFER_FLAG_CODEC_CONFIG, android.media.MediaCodec.BUFFER_FLAG_END_OF_STREAM, android.media.MediaCodec.BUFFER_FLAG_PARTIAL_FRAME}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec.BufferInfo void set(int, int, long, int) 3">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaCodec.BUFFER_FLAG_SYNC_FRAME, android.media.MediaCodec.BUFFER_FLAG_KEY_FRAME, android.media.MediaCodec.BUFFER_FLAG_CODEC_CONFIG, android.media.MediaCodec.BUFFER_FLAG_END_OF_STREAM, android.media.MediaCodec.BUFFER_FLAG_PARTIAL_FRAME}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec.Callback void onError(android.media.MediaCodec, android.media.MediaCodec.CodecException) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec.Callback void onError(android.media.MediaCodec, android.media.MediaCodec.CodecException) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec.Callback void onInputBufferAvailable(android.media.MediaCodec, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec.Callback void onOutputBufferAvailable(android.media.MediaCodec, int, android.media.MediaCodec.BufferInfo) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec.Callback void onOutputBufferAvailable(android.media.MediaCodec, int, android.media.MediaCodec.BufferInfo) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec.Callback void onOutputFormatChanged(android.media.MediaCodec, android.media.MediaFormat) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec.Callback void onOutputFormatChanged(android.media.MediaCodec, android.media.MediaFormat) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec.CodecException java.lang.String getDiagnosticInfo()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec.CryptoException CryptoException(int, java.lang.String) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCodec.CryptoException int getErrorCode()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaCodec.CryptoException.ERROR_NO_KEY, android.media.MediaCodec.CryptoException.ERROR_KEY_EXPIRED, android.media.MediaCodec.CryptoException.ERROR_RESOURCE_BUSY, android.media.MediaCodec.CryptoException.ERROR_INSUFFICIENT_OUTPUT_PROTECTION, android.media.MediaCodec.CryptoException.ERROR_SESSION_NOT_OPENED, android.media.MediaCodec.CryptoException.ERROR_UNSUPPORTED_OPERATION}" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec.CryptoInfo void set(int, int[], int[], byte[], byte[], int) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec.CryptoInfo void set(int, int[], int[], byte[], byte[], int) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec.CryptoInfo void set(int, int[], int[], byte[], byte[], int) 3">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec.CryptoInfo void set(int, int[], int[], byte[], byte[], int) 4">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodec.OnFrameRenderedListener void onFrameRendered(android.media.MediaCodec, long, long) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCodecInfo.VideoCapabilities android.util.Range&lt;java.lang.Double&gt; getAchievableFrameRatesFor(int, int)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaCrypto MediaCrypto(java.util.UUID, byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCrypto MediaCrypto(java.util.UUID, byte[]) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCrypto boolean isCryptoSchemeSupported(java.util.UUID) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCrypto boolean requiresSecureDecoderComponent(java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCrypto void setMediaDrmSession(byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaCryptoException MediaCryptoException(java.lang.String) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDescrambler boolean requiresSecureDecoderComponent(java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDescrambler int descramble(java.nio.ByteBuffer, java.nio.ByteBuffer, android.media.MediaCodec.CryptoInfo) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDescrambler int descramble(java.nio.ByteBuffer, java.nio.ByteBuffer, android.media.MediaCodec.CryptoInfo) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDescrambler int descramble(java.nio.ByteBuffer, java.nio.ByteBuffer, android.media.MediaCodec.CryptoInfo) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDescrambler void setMediaCasSession(android.media.MediaCas.Session) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDescription android.graphics.Bitmap getIconBitmap()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDescription android.net.Uri getIconUri()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDescription android.net.Uri getMediaUri()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDescription android.os.Bundle getExtras()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDescription java.lang.CharSequence getDescription()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDescription java.lang.CharSequence getSubtitle()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDescription java.lang.CharSequence getTitle()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDescription java.lang.String getMediaId()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDescription.Builder android.media.MediaDescription.Builder setDescription(java.lang.CharSequence) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDescription.Builder android.media.MediaDescription.Builder setExtras(android.os.Bundle) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDescription.Builder android.media.MediaDescription.Builder setIconBitmap(android.graphics.Bitmap) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDescription.Builder android.media.MediaDescription.Builder setIconUri(android.net.Uri) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDescription.Builder android.media.MediaDescription.Builder setMediaId(java.lang.String) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDescription.Builder android.media.MediaDescription.Builder setMediaUri(android.net.Uri) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDescription.Builder android.media.MediaDescription.Builder setSubtitle(java.lang.CharSequence) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDescription.Builder android.media.MediaDescription.Builder setTitle(java.lang.CharSequence) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDrm MediaDrm(java.util.UUID) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm android.media.MediaDrm.CryptoSession getCryptoSession(byte[], java.lang.String, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm android.media.MediaDrm.CryptoSession getCryptoSession(byte[], java.lang.String, java.lang.String) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm android.media.MediaDrm.CryptoSession getCryptoSession(byte[], java.lang.String, java.lang.String) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm android.media.MediaDrm.KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm android.media.MediaDrm.KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm android.media.MediaDrm.KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDrm android.media.MediaDrm.KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;) 2">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDrm android.media.MediaDrm.KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;) 3">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.KEY_TYPE_STREAMING, android.media.MediaDrm.KEY_TYPE_OFFLINE, android.media.MediaDrm.KEY_TYPE_RELEASE}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm android.media.MediaDrm.KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;) 4">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDrm android.media.MediaDrm.ProvisionRequest getProvisionRequest()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm boolean isCryptoSchemeSupported(java.util.UUID) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm boolean isCryptoSchemeSupported(java.util.UUID, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm boolean isCryptoSchemeSupported(java.util.UUID, java.lang.String) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm byte[] getPropertyByteArray(java.lang.String)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm byte[] getPropertyByteArray(java.lang.String) 0">
    <annotation name="android.support.annotation.StringDef">
      <val name="value" val="{android.media.MediaDrm.PROPERTY_DEVICE_UNIQUE_ID}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm byte[] getSecureStop(byte[])">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm byte[] getSecureStop(byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm byte[] openSession()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm byte[] openSession(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm byte[] openSession(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.SECURITY_LEVEL_UNKNOWN, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_ALL}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm byte[] provideKeyResponse(byte[], byte[])">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDrm byte[] provideKeyResponse(byte[], byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm byte[] provideKeyResponse(byte[], byte[]) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm int getConnectedHdcpLevel()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.HDCP_LEVEL_UNKNOWN, android.media.MediaDrm.HDCP_NONE, android.media.MediaDrm.HDCP_V1, android.media.MediaDrm.HDCP_V2, android.media.MediaDrm.HDCP_V2_1, android.media.MediaDrm.HDCP_V2_2, android.media.MediaDrm.HDCP_NO_DIGITAL_OUTPUT}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm int getMaxHdcpLevel()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.HDCP_LEVEL_UNKNOWN, android.media.MediaDrm.HDCP_NONE, android.media.MediaDrm.HDCP_V1, android.media.MediaDrm.HDCP_V2, android.media.MediaDrm.HDCP_V2_1, android.media.MediaDrm.HDCP_V2_2, android.media.MediaDrm.HDCP_NO_DIGITAL_OUTPUT}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm int getMaxSecurityLevel()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.SECURITY_LEVEL_UNKNOWN, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_ALL}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm int getSecurityLevel(byte[])">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.SECURITY_LEVEL_UNKNOWN, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_ALL}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm int getSecurityLevel(byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm java.lang.String getPropertyString(java.lang.String)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm java.lang.String getPropertyString(java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
    <annotation name="android.support.annotation.StringDef">
      <val name="value" val="{android.media.MediaDrm.PROPERTY_VENDOR, android.media.MediaDrm.PROPERTY_VERSION, android.media.MediaDrm.PROPERTY_DESCRIPTION, android.media.MediaDrm.PROPERTY_ALGORITHMS}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm java.util.HashMap&lt;java.lang.String,java.lang.String&gt; queryKeyStatus(byte[])">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm java.util.HashMap&lt;java.lang.String,java.lang.String&gt; queryKeyStatus(byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm java.util.List&lt;byte[]&gt; getSecureStopIds()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm java.util.List&lt;byte[]&gt; getSecureStops()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm void closeSession(byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm void provideProvisionResponse(byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm void releaseSecureStops(byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm void removeKeys(byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm void removeSecureStop(byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm void restoreKeys(byte[], byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm void restoreKeys(byte[], byte[]) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm void setOnEventListener(android.media.MediaDrm.OnEventListener) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDrm void setOnExpirationUpdateListener(android.media.MediaDrm.OnExpirationUpdateListener, android.os.Handler) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDrm void setOnExpirationUpdateListener(android.media.MediaDrm.OnExpirationUpdateListener, android.os.Handler) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDrm void setOnKeyStatusChangeListener(android.media.MediaDrm.OnKeyStatusChangeListener, android.os.Handler) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDrm void setOnKeyStatusChangeListener(android.media.MediaDrm.OnKeyStatusChangeListener, android.os.Handler) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDrm void setPropertyByteArray(java.lang.String, byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
    <annotation name="android.support.annotation.StringDef">
      <val name="value" val="{android.media.MediaDrm.PROPERTY_DEVICE_UNIQUE_ID}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm void setPropertyByteArray(java.lang.String, byte[]) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm void setPropertyString(java.lang.String, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
    <annotation name="android.support.annotation.StringDef">
      <val name="value" val="{android.media.MediaDrm.PROPERTY_VENDOR, android.media.MediaDrm.PROPERTY_VERSION, android.media.MediaDrm.PROPERTY_DESCRIPTION, android.media.MediaDrm.PROPERTY_ALGORITHMS}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm void setPropertyString(java.lang.String, java.lang.String) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.CryptoSession boolean verify(byte[], byte[], byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.CryptoSession boolean verify(byte[], byte[], byte[]) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.CryptoSession boolean verify(byte[], byte[], byte[]) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.CryptoSession byte[] decrypt(byte[], byte[], byte[])">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.CryptoSession byte[] decrypt(byte[], byte[], byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.CryptoSession byte[] decrypt(byte[], byte[], byte[]) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.CryptoSession byte[] decrypt(byte[], byte[], byte[]) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.CryptoSession byte[] encrypt(byte[], byte[], byte[])">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.CryptoSession byte[] encrypt(byte[], byte[], byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.CryptoSession byte[] encrypt(byte[], byte[], byte[]) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.CryptoSession byte[] encrypt(byte[], byte[], byte[]) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.CryptoSession byte[] sign(byte[], byte[])">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.CryptoSession byte[] sign(byte[], byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.CryptoSession byte[] sign(byte[], byte[]) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.HdcpLevel">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.HDCP_LEVEL_UNKNOWN, android.media.MediaDrm.HDCP_NONE, android.media.MediaDrm.HDCP_V1, android.media.MediaDrm.HDCP_V2, android.media.MediaDrm.HDCP_V2_1, android.media.MediaDrm.HDCP_V2_2, android.media.MediaDrm.HDCP_NO_DIGITAL_OUTPUT}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm.KeyRequest byte[] getData()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.KeyRequest int getRequestType()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.KeyRequest.REQUEST_TYPE_INITIAL, android.media.MediaDrm.KeyRequest.REQUEST_TYPE_RENEWAL, android.media.MediaDrm.KeyRequest.REQUEST_TYPE_RELEASE, android.media.MediaDrm.KeyRequest.REQUEST_TYPE_NONE, android.media.MediaDrm.KeyRequest.REQUEST_TYPE_UPDATE}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm.KeyRequest java.lang.String getDefaultUrl()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.KeyStatus byte[] getKeyId()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.KeyStatus int getStatusCode()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.KeyStatus.STATUS_USABLE, android.media.MediaDrm.KeyStatus.STATUS_EXPIRED, android.media.MediaDrm.KeyStatus.STATUS_OUTPUT_NOT_ALLOWED, android.media.MediaDrm.KeyStatus.STATUS_PENDING, android.media.MediaDrm.KeyStatus.STATUS_INTERNAL_ERROR}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm.MediaDrmStateException java.lang.String getDiagnosticInfo()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.OnEventListener void onEvent(android.media.MediaDrm, byte[], int, int, byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.OnEventListener void onEvent(android.media.MediaDrm, byte[], int, int, byte[]) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDrm.OnEventListener void onEvent(android.media.MediaDrm, byte[], int, int, byte[]) 2">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.EVENT_PROVISION_REQUIRED, android.media.MediaDrm.EVENT_KEY_REQUIRED, android.media.MediaDrm.EVENT_KEY_EXPIRED, android.media.MediaDrm.EVENT_VENDOR_DEFINED, android.media.MediaDrm.EVENT_SESSION_RECLAIMED}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm.OnEventListener void onEvent(android.media.MediaDrm, byte[], int, int, byte[]) 4">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaDrm.OnExpirationUpdateListener void onExpirationUpdate(android.media.MediaDrm, byte[], long) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.OnExpirationUpdateListener void onExpirationUpdate(android.media.MediaDrm, byte[], long) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.OnKeyStatusChangeListener void onKeyStatusChange(android.media.MediaDrm, byte[], java.util.List&lt;android.media.MediaDrm.KeyStatus&gt;, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.OnKeyStatusChangeListener void onKeyStatusChange(android.media.MediaDrm, byte[], java.util.List&lt;android.media.MediaDrm.KeyStatus&gt;, boolean) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.OnKeyStatusChangeListener void onKeyStatusChange(android.media.MediaDrm, byte[], java.util.List&lt;android.media.MediaDrm.KeyStatus&gt;, boolean) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.ProvisionRequest byte[] getData()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.ProvisionRequest java.lang.String getDefaultUrl()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaDrm.SecurityLevel">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.SECURITY_LEVEL_UNKNOWN, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_ALL}" />
    </annotation>
  </item>
  <item name="android.media.MediaExtractor android.media.MediaFormat getTrackFormat(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaExtractor boolean getSampleCryptoInfo(android.media.MediaCodec.CryptoInfo) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaExtractor int getSampleFlags()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaExtractor.SAMPLE_FLAG_SYNC, android.media.MediaExtractor.SAMPLE_FLAG_ENCRYPTED, android.media.MediaExtractor.SAMPLE_FLAG_PARTIAL_FRAME}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.media.MediaExtractor int readSampleData(java.nio.ByteBuffer, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaExtractor java.util.List&lt;android.media.AudioPresentation&gt; getAudioPresentations(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaExtractor java.util.Map&lt;java.util.UUID,byte[]&gt; getPsshInfo()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaExtractor void seekTo(long, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaExtractor.SEEK_TO_PREVIOUS_SYNC, android.media.MediaExtractor.SEEK_TO_NEXT_SYNC, android.media.MediaExtractor.SEEK_TO_CLOSEST_SYNC}" />
    </annotation>
  </item>
  <item name="android.media.MediaExtractor void setDataSource(android.content.Context, android.net.Uri, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaExtractor void setDataSource(android.content.Context, android.net.Uri, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaExtractor void setDataSource(android.content.Context, android.net.Uri, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 2">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaExtractor void setDataSource(android.content.res.AssetFileDescriptor) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaExtractor void setDataSource(android.media.MediaDataSource) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaExtractor void setDataSource(java.io.FileDescriptor) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaExtractor void setDataSource(java.io.FileDescriptor, long, long) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaExtractor void setDataSource(java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaExtractor void setDataSource(java.lang.String, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaExtractor void setDataSource(java.lang.String, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaExtractor void setMediaCas(android.media.MediaCas) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaMetadata android.graphics.Bitmap getBitmap(java.lang.String) 0">
    <annotation name="android.support.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_ART, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata android.media.MediaDescription getDescription()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaMetadata android.media.Rating getRating(java.lang.String) 0">
    <annotation name="android.support.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_USER_RATING, android.media.MediaMetadata.METADATA_KEY_RATING}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata java.lang.CharSequence getText(java.lang.String) 0">
    <annotation name="android.support.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_TITLE, android.media.MediaMetadata.METADATA_KEY_ARTIST, android.media.MediaMetadata.METADATA_KEY_ALBUM, android.media.MediaMetadata.METADATA_KEY_AUTHOR, android.media.MediaMetadata.METADATA_KEY_WRITER, android.media.MediaMetadata.METADATA_KEY_COMPOSER, android.media.MediaMetadata.METADATA_KEY_COMPILATION, android.media.MediaMetadata.METADATA_KEY_DATE, android.media.MediaMetadata.METADATA_KEY_GENRE, android.media.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, android.media.MediaMetadata.METADATA_KEY_ART_URI, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, android.media.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, android.media.MediaMetadata.METADATA_KEY_MEDIA_ID, android.media.MediaMetadata.METADATA_KEY_MEDIA_URI}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata java.lang.String getString(java.lang.String) 0">
    <annotation name="android.support.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_TITLE, android.media.MediaMetadata.METADATA_KEY_ARTIST, android.media.MediaMetadata.METADATA_KEY_ALBUM, android.media.MediaMetadata.METADATA_KEY_AUTHOR, android.media.MediaMetadata.METADATA_KEY_WRITER, android.media.MediaMetadata.METADATA_KEY_COMPOSER, android.media.MediaMetadata.METADATA_KEY_COMPILATION, android.media.MediaMetadata.METADATA_KEY_DATE, android.media.MediaMetadata.METADATA_KEY_GENRE, android.media.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, android.media.MediaMetadata.METADATA_KEY_ART_URI, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, android.media.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, android.media.MediaMetadata.METADATA_KEY_MEDIA_ID, android.media.MediaMetadata.METADATA_KEY_MEDIA_URI}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata long getLong(java.lang.String) 0">
    <annotation name="android.support.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_DURATION, android.media.MediaMetadata.METADATA_KEY_YEAR, android.media.MediaMetadata.METADATA_KEY_TRACK_NUMBER, android.media.MediaMetadata.METADATA_KEY_NUM_TRACKS, android.media.MediaMetadata.METADATA_KEY_DISC_NUMBER, android.media.MediaMetadata.METADATA_KEY_BT_FOLDER_TYPE}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata.Builder android.media.MediaMetadata.Builder putBitmap(java.lang.String, android.graphics.Bitmap) 0">
    <annotation name="android.support.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_ART, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata.Builder android.media.MediaMetadata.Builder putLong(java.lang.String, long) 0">
    <annotation name="android.support.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_DURATION, android.media.MediaMetadata.METADATA_KEY_YEAR, android.media.MediaMetadata.METADATA_KEY_TRACK_NUMBER, android.media.MediaMetadata.METADATA_KEY_NUM_TRACKS, android.media.MediaMetadata.METADATA_KEY_DISC_NUMBER, android.media.MediaMetadata.METADATA_KEY_BT_FOLDER_TYPE}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata.Builder android.media.MediaMetadata.Builder putRating(java.lang.String, android.media.Rating) 0">
    <annotation name="android.support.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_USER_RATING, android.media.MediaMetadata.METADATA_KEY_RATING}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata.Builder android.media.MediaMetadata.Builder putString(java.lang.String, java.lang.String) 0">
    <annotation name="android.support.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_TITLE, android.media.MediaMetadata.METADATA_KEY_ARTIST, android.media.MediaMetadata.METADATA_KEY_ALBUM, android.media.MediaMetadata.METADATA_KEY_AUTHOR, android.media.MediaMetadata.METADATA_KEY_WRITER, android.media.MediaMetadata.METADATA_KEY_COMPOSER, android.media.MediaMetadata.METADATA_KEY_COMPILATION, android.media.MediaMetadata.METADATA_KEY_DATE, android.media.MediaMetadata.METADATA_KEY_GENRE, android.media.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, android.media.MediaMetadata.METADATA_KEY_ART_URI, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, android.media.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, android.media.MediaMetadata.METADATA_KEY_MEDIA_ID, android.media.MediaMetadata.METADATA_KEY_MEDIA_URI}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata.Builder android.media.MediaMetadata.Builder putText(java.lang.String, java.lang.CharSequence) 0">
    <annotation name="android.support.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_TITLE, android.media.MediaMetadata.METADATA_KEY_ARTIST, android.media.MediaMetadata.METADATA_KEY_ALBUM, android.media.MediaMetadata.METADATA_KEY_AUTHOR, android.media.MediaMetadata.METADATA_KEY_WRITER, android.media.MediaMetadata.METADATA_KEY_COMPOSER, android.media.MediaMetadata.METADATA_KEY_COMPILATION, android.media.MediaMetadata.METADATA_KEY_DATE, android.media.MediaMetadata.METADATA_KEY_GENRE, android.media.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, android.media.MediaMetadata.METADATA_KEY_ART_URI, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, android.media.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, android.media.MediaMetadata.METADATA_KEY_MEDIA_ID, android.media.MediaMetadata.METADATA_KEY_MEDIA_URI}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getFrameAtIndex(int, android.media.MediaMetadataRetriever.BitmapParams) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getFrameAtTime(long, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaMetadataRetriever.OPTION_PREVIOUS_SYNC, android.media.MediaMetadataRetriever.OPTION_NEXT_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getImageAtIndex(int, android.media.MediaMetadataRetriever.BitmapParams) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getPrimaryImage(android.media.MediaMetadataRetriever.BitmapParams) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getScaledFrameAtTime(long, int, int, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaMetadataRetriever.OPTION_PREVIOUS_SYNC, android.media.MediaMetadataRetriever.OPTION_NEXT_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadataRetriever java.util.List&lt;android.graphics.Bitmap&gt; getFramesAtIndex(int, int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaMetadataRetriever java.util.List&lt;android.graphics.Bitmap&gt; getFramesAtIndex(int, int, android.media.MediaMetadataRetriever.BitmapParams)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaMetadataRetriever java.util.List&lt;android.graphics.Bitmap&gt; getFramesAtIndex(int, int, android.media.MediaMetadataRetriever.BitmapParams) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaMetadataRetriever.BitmapParams android.graphics.Bitmap.Config getActualConfig()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaMetadataRetriever.BitmapParams android.graphics.Bitmap.Config getPreferredConfig()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaMetadataRetriever.BitmapParams void setPreferredConfig(android.graphics.Bitmap.Config) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaMuxer MediaMuxer(java.io.FileDescriptor, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaMuxer MediaMuxer(java.io.FileDescriptor, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_WEBM, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_3GPP, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_HEIF}" />
    </annotation>
  </item>
  <item name="android.media.MediaMuxer MediaMuxer(java.lang.String, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaMuxer MediaMuxer(java.lang.String, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_WEBM, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_3GPP, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_HEIF}" />
    </annotation>
  </item>
  <item name="android.media.MediaMuxer int addTrack(android.media.MediaFormat) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaMuxer void writeSampleData(int, java.nio.ByteBuffer, android.media.MediaCodec.BufferInfo) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaMuxer void writeSampleData(int, java.nio.ByteBuffer, android.media.MediaCodec.BufferInfo) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer android.media.MediaDrm.KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.Map&lt;java.lang.String,java.lang.String&gt;)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer android.media.MediaDrm.KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaPlayer android.media.MediaDrm.KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaPlayer android.media.MediaDrm.KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 2">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaPlayer android.media.MediaDrm.KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 3">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.KEY_TYPE_STREAMING, android.media.MediaDrm.KEY_TYPE_OFFLINE, android.media.MediaDrm.KEY_TYPE_RELEASE}" />
    </annotation>
  </item>
  <item name="android.media.MediaPlayer android.media.MediaDrm.KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 4">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaPlayer android.media.MediaTimestamp getTimestamp()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaPlayer android.media.PlaybackParams getPlaybackParams()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer android.media.SyncParams getSyncParams()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper.Configuration)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper.Configuration) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer byte[] provideKeyResponse(byte[], byte[]) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaPlayer byte[] provideKeyResponse(byte[], byte[]) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer java.lang.String getDrmPropertyString(java.lang.String)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer java.lang.String getDrmPropertyString(java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
    <annotation name="android.support.annotation.StringDef">
      <val name="value" val="{android.media.MediaDrm.PROPERTY_VENDOR, android.media.MediaDrm.PROPERTY_VERSION, android.media.MediaDrm.PROPERTY_DESCRIPTION, android.media.MediaDrm.PROPERTY_ALGORITHMS}" />
    </annotation>
  </item>
  <item name="android.media.MediaPlayer void prepareDrm(java.util.UUID) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void restoreKeys(byte[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void seekTo(long, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaPlayer.SEEK_PREVIOUS_SYNC, android.media.MediaPlayer.SEEK_NEXT_SYNC, android.media.MediaPlayer.SEEK_CLOSEST_SYNC, android.media.MediaPlayer.SEEK_CLOSEST}" />
    </annotation>
  </item>
  <item name="android.media.MediaPlayer void setDataSource(android.content.Context, android.net.Uri) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void setDataSource(android.content.Context, android.net.Uri) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void setDataSource(android.content.Context, android.net.Uri, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void setDataSource(android.content.Context, android.net.Uri, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void setDataSource(android.content.Context, android.net.Uri, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 2">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaPlayer void setDataSource(android.content.Context, android.net.Uri, java.util.Map&lt;java.lang.String,java.lang.String&gt;, java.util.List&lt;java.net.HttpCookie&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void setDataSource(android.content.Context, android.net.Uri, java.util.Map&lt;java.lang.String,java.lang.String&gt;, java.util.List&lt;java.net.HttpCookie&gt;) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void setDataSource(android.content.Context, android.net.Uri, java.util.Map&lt;java.lang.String,java.lang.String&gt;, java.util.List&lt;java.net.HttpCookie&gt;) 2">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaPlayer void setDataSource(android.content.Context, android.net.Uri, java.util.Map&lt;java.lang.String,java.lang.String&gt;, java.util.List&lt;java.net.HttpCookie&gt;) 3">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaPlayer void setDataSource(android.content.res.AssetFileDescriptor) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void setDrmPropertyString(java.lang.String, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
    <annotation name="android.support.annotation.StringDef">
      <val name="value" val="{android.media.MediaDrm.PROPERTY_VENDOR, android.media.MediaDrm.PROPERTY_VERSION, android.media.MediaDrm.PROPERTY_DESCRIPTION, android.media.MediaDrm.PROPERTY_ALGORITHMS}" />
    </annotation>
  </item>
  <item name="android.media.MediaPlayer void setDrmPropertyString(java.lang.String, java.lang.String) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer.OnMediaTimeDiscontinuityListener) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer.OnMediaTimeDiscontinuityListener, android.os.Handler) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer.OnMediaTimeDiscontinuityListener, android.os.Handler) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void setOnSubtitleDataListener(android.media.MediaPlayer.OnSubtitleDataListener) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void setOnSubtitleDataListener(android.media.MediaPlayer.OnSubtitleDataListener, android.os.Handler) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void setOnSubtitleDataListener(android.media.MediaPlayer.OnSubtitleDataListener, android.os.Handler) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void setPlaybackParams(android.media.PlaybackParams) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer void setSyncParams(android.media.SyncParams) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer.OnDrmPreparedListener void onDrmPrepared(android.media.MediaPlayer, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaPlayer.PREPARE_DRM_STATUS_SUCCESS, android.media.MediaPlayer.PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR, android.media.MediaPlayer.PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR, android.media.MediaPlayer.PREPARE_DRM_STATUS_PREPARATION_ERROR}" />
    </annotation>
  </item>
  <item name="android.media.MediaPlayer.OnMediaTimeDiscontinuityListener void onMediaTimeDiscontinuity(android.media.MediaPlayer, android.media.MediaTimestamp) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer.OnMediaTimeDiscontinuityListener void onMediaTimeDiscontinuity(android.media.MediaPlayer, android.media.MediaTimestamp) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer.OnSubtitleDataListener void onSubtitleData(android.media.MediaPlayer, android.media.SubtitleData) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer.OnSubtitleDataListener void onSubtitleData(android.media.MediaPlayer, android.media.SubtitleData) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaPlayer.TrackInfo int getTrackType()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_UNKNOWN, android.media.MediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_VIDEO, android.media.MediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_AUDIO, android.media.MediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_TIMEDTEXT, android.media.MediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_SUBTITLE, android.media.MediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_METADATA}" />
      <val name="flag" val="false" />
    </annotation>
  </item>
  <item name="android.media.MediaRecorder void setInputSurface(android.view.Surface) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaRecorder.AudioSource REMOTE_SUBMIX">
    <annotation name="android.support.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.CAPTURE_AUDIO_OUTPUT&quot;" />
    </annotation>
  </item>
  <item name="android.media.MediaRouter">
    <annotation name="android.support.annotation.SystemService">
      <val name="value" val="android.content.Context.MEDIA_ROUTER_SERVICE" />
    </annotation>
  </item>
  <item name="android.media.MediaRouter void selectRoute(int, android.media.MediaRouter.RouteInfo) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaRouter.RouteGroup void setIconResource(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.media.MediaRouter.RouteInfo int getDeviceType()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaRouter.RouteInfo.DEVICE_TYPE_UNKNOWN, android.media.MediaRouter.RouteInfo.DEVICE_TYPE_TV, android.media.MediaRouter.RouteInfo.DEVICE_TYPE_SPEAKER, android.media.MediaRouter.RouteInfo.DEVICE_TYPE_BLUETOOTH}" />
    </annotation>
  </item>
  <item name="android.media.MediaRouter.RouteInfo int getPlaybackType()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaRouter.RouteInfo.PLAYBACK_TYPE_LOCAL, android.media.MediaRouter.RouteInfo.PLAYBACK_TYPE_REMOTE}" />
    </annotation>
  </item>
  <item name="android.media.MediaRouter.RouteInfo int getVolumeHandling()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaRouter.RouteInfo.PLAYBACK_VOLUME_FIXED, android.media.MediaRouter.RouteInfo.PLAYBACK_VOLUME_VARIABLE}" />
    </annotation>
  </item>
  <item name="android.media.MediaRouter.UserRouteInfo void setIconResource(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.media.MediaRouter.UserRouteInfo void setPlaybackType(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaRouter.RouteInfo.PLAYBACK_TYPE_LOCAL, android.media.MediaRouter.RouteInfo.PLAYBACK_TYPE_REMOTE}" />
    </annotation>
  </item>
  <item name="android.media.MediaRouter.UserRouteInfo void setVolumeHandling(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MediaRouter.RouteInfo.PLAYBACK_VOLUME_FIXED, android.media.MediaRouter.RouteInfo.PLAYBACK_VOLUME_VARIABLE}" />
    </annotation>
  </item>
  <item name="android.media.MediaSync android.media.MediaTimestamp getTimestamp()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaSync android.media.PlaybackParams getPlaybackParams()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaSync android.media.SyncParams getSyncParams()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaSync android.view.Surface createInputSurface()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaSync void queueAudio(java.nio.ByteBuffer, int, long) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaSync void setAudioTrack(android.media.AudioTrack) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaSync void setCallback(android.media.MediaSync.Callback, android.os.Handler) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaSync void setCallback(android.media.MediaSync.Callback, android.os.Handler) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaSync void setOnErrorListener(android.media.MediaSync.OnErrorListener, android.os.Handler) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaSync void setOnErrorListener(android.media.MediaSync.OnErrorListener, android.os.Handler) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaSync void setPlaybackParams(android.media.PlaybackParams) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaSync void setSurface(android.view.Surface) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.media.MediaSync void setSyncParams(android.media.SyncParams) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaSync.Callback void onAudioBufferConsumed(android.media.MediaSync, java.nio.ByteBuffer, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaSync.Callback void onAudioBufferConsumed(android.media.MediaSync, java.nio.ByteBuffer, int) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MediaSync.OnErrorListener void onError(android.media.MediaSync, int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.MicrophoneInfo int getDirectionality()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MicrophoneInfo.DIRECTIONALITY_UNKNOWN, android.media.MicrophoneInfo.DIRECTIONALITY_OMNI, android.media.MicrophoneInfo.DIRECTIONALITY_BI_DIRECTIONAL, android.media.MicrophoneInfo.DIRECTIONALITY_CARDIOID, android.media.MicrophoneInfo.DIRECTIONALITY_HYPER_CARDIOID, android.media.MicrophoneInfo.DIRECTIONALITY_SUPER_CARDIOID}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.media.MicrophoneInfo int getLocation()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.MicrophoneInfo.LOCATION_UNKNOWN, android.media.MicrophoneInfo.LOCATION_MAINBODY, android.media.MicrophoneInfo.LOCATION_MAINBODY_MOVABLE, android.media.MicrophoneInfo.LOCATION_PERIPHERAL}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.media.MicrophoneInfo java.lang.String getAddress()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.PlaybackParams android.media.PlaybackParams setAudioFallbackMode(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.PlaybackParams.AUDIO_FALLBACK_MODE_DEFAULT, android.media.PlaybackParams.AUDIO_FALLBACK_MODE_MUTE, android.media.PlaybackParams.AUDIO_FALLBACK_MODE_FAIL}" />
    </annotation>
  </item>
  <item name="android.media.PlaybackParams int getAudioFallbackMode()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.PlaybackParams.AUDIO_FALLBACK_MODE_DEFAULT, android.media.PlaybackParams.AUDIO_FALLBACK_MODE_MUTE, android.media.PlaybackParams.AUDIO_FALLBACK_MODE_FAIL}" />
    </annotation>
  </item>
  <item name="android.media.Rating android.media.Rating newStarRating(int, float) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.Rating.RATING_3_STARS, android.media.Rating.RATING_4_STARS, android.media.Rating.RATING_5_STARS}" />
    </annotation>
  </item>
  <item name="android.media.Rating android.media.Rating newUnratedRating(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.Rating.RATING_NONE, android.media.Rating.RATING_HEART, android.media.Rating.RATING_THUMB_UP_DOWN, android.media.Rating.RATING_3_STARS, android.media.Rating.RATING_4_STARS, android.media.Rating.RATING_5_STARS, android.media.Rating.RATING_PERCENTAGE}" />
    </annotation>
  </item>
  <item name="android.media.Rating int getRatingStyle()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.Rating.RATING_NONE, android.media.Rating.RATING_HEART, android.media.Rating.RATING_THUMB_UP_DOWN, android.media.Rating.RATING_3_STARS, android.media.Rating.RATING_4_STARS, android.media.Rating.RATING_5_STARS, android.media.Rating.RATING_PERCENTAGE}" />
    </annotation>
  </item>
  <item name="android.media.SubtitleData byte[] getData()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.SyncParams android.media.SyncParams setAudioAdjustMode(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.SyncParams.AUDIO_ADJUST_MODE_DEFAULT, android.media.SyncParams.AUDIO_ADJUST_MODE_STRETCH, android.media.SyncParams.AUDIO_ADJUST_MODE_RESAMPLE}" />
    </annotation>
  </item>
  <item name="android.media.SyncParams android.media.SyncParams setSyncSource(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.SyncParams.SYNC_SOURCE_DEFAULT, android.media.SyncParams.SYNC_SOURCE_SYSTEM_CLOCK, android.media.SyncParams.SYNC_SOURCE_AUDIO, android.media.SyncParams.SYNC_SOURCE_VSYNC}" />
    </annotation>
  </item>
  <item name="android.media.SyncParams int getAudioAdjustMode()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.SyncParams.AUDIO_ADJUST_MODE_DEFAULT, android.media.SyncParams.AUDIO_ADJUST_MODE_STRETCH, android.media.SyncParams.AUDIO_ADJUST_MODE_RESAMPLE}" />
    </annotation>
  </item>
  <item name="android.media.SyncParams int getSyncSource()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.SyncParams.SYNC_SOURCE_DEFAULT, android.media.SyncParams.SYNC_SOURCE_SYSTEM_CLOCK, android.media.SyncParams.SYNC_SOURCE_AUDIO, android.media.SyncParams.SYNC_SOURCE_VSYNC}" />
    </annotation>
  </item>
  <item name="android.media.VolumeAutomation android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper.Configuration)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.VolumeAutomation android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper.Configuration) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.VolumeProvider VolumeProvider(int, int, int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.VolumeProvider.VOLUME_CONTROL_FIXED, android.media.VolumeProvider.VOLUME_CONTROL_RELATIVE, android.media.VolumeProvider.VOLUME_CONTROL_ABSOLUTE}" />
    </annotation>
  </item>
  <item name="android.media.VolumeProvider int getVolumeControl()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.VolumeProvider.VOLUME_CONTROL_FIXED, android.media.VolumeProvider.VOLUME_CONTROL_RELATIVE, android.media.VolumeProvider.VOLUME_CONTROL_ABSOLUTE}" />
    </annotation>
  </item>
  <item name="android.media.VolumeShaper void apply(android.media.VolumeShaper.Operation) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.VolumeShaper void replace(android.media.VolumeShaper.Configuration, android.media.VolumeShaper.Operation, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.VolumeShaper void replace(android.media.VolumeShaper.Configuration, android.media.VolumeShaper.Operation, boolean) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.VolumeShaper.Configuration int getInterpolatorType()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_STEP, android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_LINEAR, android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_CUBIC, android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_CUBIC_MONOTONIC}" />
    </annotation>
  </item>
  <item name="android.media.VolumeShaper.Configuration.Builder Builder(android.media.VolumeShaper.Configuration) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.VolumeShaper.Configuration.Builder android.media.VolumeShaper.Configuration build()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.VolumeShaper.Configuration.Builder android.media.VolumeShaper.Configuration.Builder invertVolumes()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.VolumeShaper.Configuration.Builder android.media.VolumeShaper.Configuration.Builder reflectTimes()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.VolumeShaper.Configuration.Builder android.media.VolumeShaper.Configuration.Builder scaleToEndVolume(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.VolumeShaper.Configuration.Builder android.media.VolumeShaper.Configuration.Builder scaleToStartVolume(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.VolumeShaper.Configuration.Builder android.media.VolumeShaper.Configuration.Builder setCurve(float[], float[])">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.VolumeShaper.Configuration.Builder android.media.VolumeShaper.Configuration.Builder setCurve(float[], float[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.VolumeShaper.Configuration.Builder android.media.VolumeShaper.Configuration.Builder setCurve(float[], float[]) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.VolumeShaper.Configuration.Builder android.media.VolumeShaper.Configuration.Builder setDuration(long)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.VolumeShaper.Configuration.Builder android.media.VolumeShaper.Configuration.Builder setInterpolatorType(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.media.VolumeShaper.Configuration.Builder android.media.VolumeShaper.Configuration.Builder setInterpolatorType(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_STEP, android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_LINEAR, android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_CUBIC, android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_CUBIC_MONOTONIC}" />
    </annotation>
  </item>
</root>

