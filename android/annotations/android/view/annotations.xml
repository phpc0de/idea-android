<?xml version="1.0" encoding="UTF-8"?>
<root>
  <item name="android.view.ActionMode void setSubtitle(int) 0">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.ActionMode void setTitle(int) 0">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.ContextMenu android.view.ContextMenu setHeaderIcon(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.ContextMenu android.view.ContextMenu setHeaderTitle(int) 0">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.ContextThemeWrapper ContextThemeWrapper(android.content.Context, int) 1">
    <annotation name="android.support.annotation.StyleRes" />
  </item>
  <item name="android.view.Display int getOrientation()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.Surface.ROTATION_0, android.view.Surface.ROTATION_90, android.view.Surface.ROTATION_180, android.view.Surface.ROTATION_270}" />
    </annotation>
  </item>
  <item name="android.view.Display int getRotation()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.Surface.ROTATION_0, android.view.Surface.ROTATION_90, android.view.Surface.ROTATION_180, android.view.Surface.ROTATION_270}" />
    </annotation>
  </item>
  <item name="android.view.Display.HdrCapabilities int[] getSupportedHdrTypes()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.Display.HdrCapabilities.HDR_TYPE_DOLBY_VISION, android.view.Display.HdrCapabilities.HDR_TYPE_HDR10, android.view.Display.HdrCapabilities.HDR_TYPE_HLG}" />
    </annotation>
  </item>
  <item name="android.view.FocusFinder android.view.View findNextKeyboardNavigationCluster(android.view.View, android.view.View, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.FocusFinder android.view.View findNextKeyboardNavigationCluster(android.view.View, android.view.View, int) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.FocusFinder android.view.View findNextKeyboardNavigationCluster(android.view.View, android.view.View, int) 2">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}" />
    </annotation>
  </item>
  <item name="android.view.FrameMetrics long getMetric(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.FrameMetrics.UNKNOWN_DELAY_DURATION, android.view.FrameMetrics.INPUT_HANDLING_DURATION, android.view.FrameMetrics.ANIMATION_DURATION, android.view.FrameMetrics.LAYOUT_MEASURE_DURATION, android.view.FrameMetrics.DRAW_DURATION, android.view.FrameMetrics.SYNC_DURATION, android.view.FrameMetrics.COMMAND_ISSUE_DURATION, android.view.FrameMetrics.SWAP_BUFFERS_DURATION, android.view.FrameMetrics.TOTAL_DURATION, android.view.FrameMetrics.FIRST_DRAW_FRAME, android.view.FrameMetrics.INTENDED_VSYNC_TIMESTAMP, android.view.FrameMetrics.VSYNC_TIMESTAMP}" />
    </annotation>
  </item>
  <item name="android.view.KeyboardShortcutGroup KeyboardShortcutGroup(java.lang.CharSequence) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.KeyboardShortcutGroup KeyboardShortcutGroup(java.lang.CharSequence, java.util.List&lt;android.view.KeyboardShortcutInfo&gt;) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.KeyboardShortcutGroup KeyboardShortcutGroup(java.lang.CharSequence, java.util.List&lt;android.view.KeyboardShortcutInfo&gt;) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyboardShortcutInfo java.lang.CharSequence getLabel()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.LayoutInflater">
    <annotation name="android.support.annotation.SystemService">
      <val name="value" val="android.content.Context.LAYOUT_INFLATER_SERVICE" />
    </annotation>
  </item>
  <item name="android.view.LayoutInflater android.view.View inflate(int, android.view.ViewGroup) 0">
    <annotation name="android.support.annotation.LayoutRes" />
  </item>
  <item name="android.view.LayoutInflater android.view.View inflate(int, android.view.ViewGroup) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.LayoutInflater android.view.View inflate(int, android.view.ViewGroup, boolean) 0">
    <annotation name="android.support.annotation.LayoutRes" />
  </item>
  <item name="android.view.LayoutInflater android.view.View inflate(int, android.view.ViewGroup, boolean) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.LayoutInflater android.view.View inflate(org.xmlpull.v1.XmlPullParser, android.view.ViewGroup) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.LayoutInflater android.view.View inflate(org.xmlpull.v1.XmlPullParser, android.view.ViewGroup, boolean) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.Menu android.view.MenuItem add(int) 0">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.Menu android.view.MenuItem add(int, int, int, int) 3">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.Menu android.view.SubMenu addSubMenu(int) 0">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.Menu android.view.SubMenu addSubMenu(int, int, int, int) 3">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.MenuInflater void inflate(int, android.view.Menu) 0">
    <annotation name="android.support.annotation.MenuRes" />
  </item>
  <item name="android.view.MenuItem android.content.res.ColorStateList getIconTintList()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.MenuItem android.graphics.PorterDuff.Mode getIconTintMode()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.MenuItem android.view.MenuItem setActionView(int) 0">
    <annotation name="android.support.annotation.LayoutRes" />
  </item>
  <item name="android.view.MenuItem android.view.MenuItem setIcon(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.MenuItem android.view.MenuItem setIconTintList(android.content.res.ColorStateList) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.MenuItem android.view.MenuItem setIconTintMode(android.graphics.PorterDuff.Mode) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.MenuItem android.view.MenuItem setTitle(int) 0">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Surface, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Surface, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Surface, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Surface, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 3">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Surface, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Surface, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Surface, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Surface, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 3">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Surface, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 4">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.SurfaceView, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.SurfaceView, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.SurfaceView, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.SurfaceView, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 3">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.SurfaceView, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.SurfaceView, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.SurfaceView, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.SurfaceView, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 3">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.SurfaceView, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 4">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Window, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Window, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Window, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Window, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 3">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Window, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Window, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Window, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Window, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 3">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy void request(android.view.Window, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy.OnPixelCopyFinishedListener, android.os.Handler) 4">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PixelCopy.OnPixelCopyFinishedListener void onPixelCopyFinished(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.PixelCopy.SUCCESS, android.view.PixelCopy.ERROR_UNKNOWN, android.view.PixelCopy.ERROR_TIMEOUT, android.view.PixelCopy.ERROR_SOURCE_NO_DATA, android.view.PixelCopy.ERROR_SOURCE_INVALID, android.view.PixelCopy.ERROR_DESTINATION_INVALID}" />
    </annotation>
  </item>
  <item name="android.view.PointerIcon android.view.PointerIcon create(android.graphics.Bitmap, float, float) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PointerIcon android.view.PointerIcon getSystemIcon(android.content.Context, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PointerIcon android.view.PointerIcon load(android.content.res.Resources, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.PointerIcon android.view.PointerIcon load(android.content.res.Resources, int) 1">
    <annotation name="android.support.annotation.XmlRes" />
  </item>
  <item name="android.view.SubMenu android.view.SubMenu setHeaderIcon(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.SubMenu android.view.SubMenu setHeaderTitle(int) 0">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.SubMenu android.view.SubMenu setIcon(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.TextureView void setLayerPaint(android.graphics.Paint) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.TextureView void setLayerType(int, android.graphics.Paint) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View">
    <annotation name="android.support.annotation.UiThread" />
  </item>
  <item name="android.view.View T findViewById(int) 0">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.View T requireViewById(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View T requireViewById(int) 0">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.View View(android.content.Context, android.util.AttributeSet) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View View(android.content.Context, android.util.AttributeSet, int) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View View(android.content.Context, android.util.AttributeSet, int, int) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View android.content.res.ColorStateList getBackgroundTintList()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View android.content.res.ColorStateList getForegroundTintList()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View android.graphics.PorterDuff.Mode getBackgroundTintMode()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View android.graphics.PorterDuff.Mode getForegroundTintMode()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View android.os.Parcelable onSaveInstanceState()">
    <annotation name="android.support.annotation.CallSuper" />
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View android.view.View focusSearch(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}" />
    </annotation>
  </item>
  <item name="android.view.View android.view.View inflate(android.content.Context, int, android.view.ViewGroup) 1">
    <annotation name="android.support.annotation.LayoutRes" />
  </item>
  <item name="android.view.View android.view.View keyboardNavigationClusterSearch(android.view.View, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}" />
    </annotation>
  </item>
  <item name="android.view.View android.view.autofill.AutofillValue getAutofillValue()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View boolean dispatchNestedPreScroll(int, int, int[], int[]) 2">
    <annotation name="android.support.annotation.Nullable" />
    <annotation name="android.support.annotation.Size">
      <val name="value" val="2" />
    </annotation>
  </item>
  <item name="android.view.View boolean dispatchNestedPreScroll(int, int, int[], int[]) 3">
    <annotation name="android.support.annotation.Nullable" />
    <annotation name="android.support.annotation.Size">
      <val name="value" val="2" />
    </annotation>
  </item>
  <item name="android.view.View boolean dispatchNestedScroll(int, int, int, int, int[]) 4">
    <annotation name="android.support.annotation.Nullable" />
    <annotation name="android.support.annotation.Size">
      <val name="value" val="2" />
    </annotation>
  </item>
  <item name="android.view.View boolean dispatchUnhandledMove(android.view.View, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}" />
    </annotation>
  </item>
  <item name="android.view.View boolean verifyDrawable(android.graphics.drawable.Drawable)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View boolean verifyDrawable(android.graphics.drawable.Drawable) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View int getAutofillType()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.AUTOFILL_TYPE_NONE, android.view.View.AUTOFILL_TYPE_TEXT, android.view.View.AUTOFILL_TYPE_TOGGLE, android.view.View.AUTOFILL_TYPE_LIST, android.view.View.AUTOFILL_TYPE_DATE}" />
    </annotation>
  </item>
  <item name="android.view.View int getBaseline()">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View int getBottom()">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View int getDrawingCacheBackgroundColor()">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.View int getDrawingCacheQuality()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.DRAWING_CACHE_QUALITY_LOW, android.view.View.DRAWING_CACHE_QUALITY_HIGH, android.view.View.DRAWING_CACHE_QUALITY_AUTO}" />
    </annotation>
  </item>
  <item name="android.view.View int getFocusable()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.NOT_FOCUSABLE, android.view.View.FOCUSABLE, android.view.View.FOCUSABLE_AUTO}" />
    </annotation>
  </item>
  <item name="android.view.View int getHeight()">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View int getHorizontalFadingEdgeLength()">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View int getId()">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.View int getImportantForAccessibility()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.IMPORTANT_FOR_ACCESSIBILITY_AUTO, android.view.View.IMPORTANT_FOR_ACCESSIBILITY_YES, android.view.View.IMPORTANT_FOR_ACCESSIBILITY_NO, android.view.View.IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS}" />
    </annotation>
  </item>
  <item name="android.view.View int getImportantForAutofill()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.IMPORTANT_FOR_AUTOFILL_AUTO, android.view.View.IMPORTANT_FOR_AUTOFILL_YES, android.view.View.IMPORTANT_FOR_AUTOFILL_NO, android.view.View.IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS, android.view.View.IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS}" />
    </annotation>
  </item>
  <item name="android.view.View int getLabelFor()">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.View int getLayoutDirection()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.LAYOUT_DIRECTION_LTR, android.view.View.LAYOUT_DIRECTION_RTL}" />
    </annotation>
  </item>
  <item name="android.view.View int getLeft()">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View int getMeasuredHeight()">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View int getMeasuredWidth()">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View int getOutlineAmbientShadowColor()">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.View int getOutlineSpotShadowColor()">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.View int getRight()">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View int getScrollBarStyle()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.SCROLLBARS_INSIDE_OVERLAY, android.view.View.SCROLLBARS_INSIDE_INSET, android.view.View.SCROLLBARS_OUTSIDE_OVERLAY, android.view.View.SCROLLBARS_OUTSIDE_INSET}" />
    </annotation>
  </item>
  <item name="android.view.View int getScrollIndicators()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.SCROLL_INDICATOR_TOP, android.view.View.SCROLL_INDICATOR_BOTTOM, android.view.View.SCROLL_INDICATOR_LEFT, android.view.View.SCROLL_INDICATOR_RIGHT, android.view.View.SCROLL_INDICATOR_START, android.view.View.SCROLL_INDICATOR_END}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.View int getScrollX()">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View int getScrollY()">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View int getSolidColor()">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.View int getTextAlignment()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.TEXT_ALIGNMENT_INHERIT, android.view.View.TEXT_ALIGNMENT_GRAVITY, android.view.View.TEXT_ALIGNMENT_CENTER, android.view.View.TEXT_ALIGNMENT_TEXT_START, android.view.View.TEXT_ALIGNMENT_TEXT_END, android.view.View.TEXT_ALIGNMENT_VIEW_START, android.view.View.TEXT_ALIGNMENT_VIEW_END}" />
    </annotation>
  </item>
  <item name="android.view.View int getTextDirection()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.TEXT_DIRECTION_LTR, android.view.View.TEXT_DIRECTION_RTL, android.view.View.TEXT_DIRECTION_ANY_RTL, android.view.View.TEXT_DIRECTION_LOCALE, android.view.View.TEXT_DIRECTION_FIRST_STRONG, android.view.View.TEXT_DIRECTION_FIRST_STRONG_LTR, android.view.View.TEXT_DIRECTION_FIRST_STRONG_RTL}" />
    </annotation>
  </item>
  <item name="android.view.View int getTop()">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View int getVerticalFadingEdgeLength()">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View int getVerticalScrollbarWidth()">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View int getVisibility()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View int getWidth()">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View int getWindowVisibility()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View java.lang.CharSequence getAccessibilityPaneTitle()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View java.lang.CharSequence getTooltipText()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View java.lang.String[] getAutofillHints()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View java.util.ArrayList&lt;android.view.View&gt; getFocusables(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}" />
    </annotation>
  </item>
  <item name="android.view.View void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo, java.lang.String, android.os.Bundle) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo, java.lang.String, android.os.Bundle) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo, java.lang.String, android.os.Bundle) 2">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void addFocusables(java.util.ArrayList&lt;android.view.View&gt;, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}" />
    </annotation>
  </item>
  <item name="android.view.View void addFocusables(java.util.ArrayList&lt;android.view.View&gt;, int, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}" />
    </annotation>
  </item>
  <item name="android.view.View void addFocusables(java.util.ArrayList&lt;android.view.View&gt;, int, int) 2">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FOCUSABLES_ALL, android.view.View.FOCUSABLES_TOUCH_MODE}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.View void addKeyboardNavigationClusters(java.util.Collection&lt;android.view.View&gt;, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void autofill(android.util.SparseArray&lt;android.view.autofill.AutofillValue&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void dispatchDisplayHint(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View void dispatchFinishTemporaryDetach()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void dispatchProvideAutofillStructure(android.view.ViewStructure, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void dispatchProvideAutofillStructure(android.view.ViewStructure, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.View void dispatchStartTemporaryDetach()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void dispatchVisibilityChanged(android.view.View, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void dispatchVisibilityChanged(android.view.View, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View void dispatchWindowVisibilityChanged(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View void draw(android.graphics.Canvas)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void drawableHotspotChanged(float, float)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void drawableStateChanged()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void findViewsWithText(java.util.ArrayList&lt;android.view.View&gt;, java.lang.CharSequence, int) 2">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FIND_VIEWS_WITH_TEXT, android.view.View.FIND_VIEWS_WITH_CONTENT_DESCRIPTION}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.View void getLocationInWindow(int[]) 0">
    <annotation name="android.support.annotation.Size">
      <val name="value" val="2" />
    </annotation>
  </item>
  <item name="android.view.View void getLocationOnScreen(int[]) 0">
    <annotation name="android.support.annotation.Size">
      <val name="value" val="2" />
    </annotation>
  </item>
  <item name="android.view.View void invalidateDrawable(android.graphics.drawable.Drawable) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void jumpDrawablesToCurrentState()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void layout(int, int, int, int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void layout(int, int, int, int) 1">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void layout(int, int, int, int) 2">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void layout(int, int, int, int) 3">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void offsetLeftAndRight(int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void offsetTopAndBottom(int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void onAnimationEnd()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onAnimationStart()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onAttachedToWindow()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onDetachedFromWindow()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onDisplayHint(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View void onFinishInflate()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onFocusChanged(boolean, int, android.graphics.Rect)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onFocusChanged(boolean, int, android.graphics.Rect) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}" />
    </annotation>
  </item>
  <item name="android.view.View void onFocusChanged(boolean, int, android.graphics.Rect) 2">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onPointerCaptureChange(boolean)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onProvideAutofillStructure(android.view.ViewStructure, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.View void onRestoreInstanceState(android.os.Parcelable)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onRtlPropertiesChanged(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.LAYOUT_DIRECTION_LTR, android.view.View.LAYOUT_DIRECTION_RTL}" />
    </annotation>
  </item>
  <item name="android.view.View void onVisibilityAggregated(boolean)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onVisibilityChanged(android.view.View, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void onVisibilityChanged(android.view.View, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View void onWindowVisibilityChanged(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View void requestLayout()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void scrollBy(int, int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void scrollBy(int, int) 1">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void scrollTo(int, int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void scrollTo(int, int) 1">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setAccessibilityDelegate(android.view.View.AccessibilityDelegate) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setAccessibilityPaneTitle(java.lang.CharSequence) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setAlpha(float) 0">
    <annotation name="android.support.annotation.FloatRange">
      <val name="from" val="0.0" />
      <val name="to" val="1.0" />
    </annotation>
  </item>
  <item name="android.view.View void setAutofillHints(java.lang.String...) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setAutofillId(android.view.autofill.AutofillId) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setBackgroundColor(int) 0">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.View void setBackgroundResource(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.View void setBackgroundTintList(android.content.res.ColorStateList) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setBackgroundTintMode(android.graphics.PorterDuff.Mode) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setBottom(int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setDrawingCacheBackgroundColor(int) 0">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.View void setDrawingCacheQuality(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.DRAWING_CACHE_QUALITY_LOW, android.view.View.DRAWING_CACHE_QUALITY_HIGH, android.view.View.DRAWING_CACHE_QUALITY_AUTO}" />
    </annotation>
  </item>
  <item name="android.view.View void setElevation(float) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setFadingEdgeLength(int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setFocusable(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.NOT_FOCUSABLE, android.view.View.FOCUSABLE, android.view.View.FOCUSABLE_AUTO}" />
    </annotation>
  </item>
  <item name="android.view.View void setForegroundTintList(android.content.res.ColorStateList) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setForegroundTintMode(android.graphics.PorterDuff.Mode) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setId(int) 0">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.View void setImportantForAccessibility(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.IMPORTANT_FOR_ACCESSIBILITY_AUTO, android.view.View.IMPORTANT_FOR_ACCESSIBILITY_YES, android.view.View.IMPORTANT_FOR_ACCESSIBILITY_NO, android.view.View.IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS}" />
    </annotation>
  </item>
  <item name="android.view.View void setImportantForAutofill(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.IMPORTANT_FOR_AUTOFILL_AUTO, android.view.View.IMPORTANT_FOR_AUTOFILL_YES, android.view.View.IMPORTANT_FOR_AUTOFILL_NO, android.view.View.IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS, android.view.View.IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS}" />
    </annotation>
  </item>
  <item name="android.view.View void setLabelFor(int) 0">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.View void setLayerPaint(android.graphics.Paint) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setLayerType(int, android.graphics.Paint) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setLayoutDirection(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.LAYOUT_DIRECTION_LTR, android.view.View.LAYOUT_DIRECTION_RTL, android.view.View.LAYOUT_DIRECTION_INHERIT, android.view.View.LAYOUT_DIRECTION_LOCALE}" />
    </annotation>
  </item>
  <item name="android.view.View void setLeft(int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setOnClickListener(android.view.View.OnClickListener) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setOnContextClickListener(android.view.View.OnContextClickListener) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setOnLongClickListener(android.view.View.OnLongClickListener) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setOutlineAmbientShadowColor(int) 0">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.View void setOutlineSpotShadowColor(int) 0">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.View void setPadding(int, int, int, int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setPadding(int, int, int, int) 1">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setPadding(int, int, int, int) 2">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setPadding(int, int, int, int) 3">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setPaddingRelative(int, int, int, int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setPaddingRelative(int, int, int, int) 1">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setPaddingRelative(int, int, int, int) 2">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setPaddingRelative(int, int, int, int) 3">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setRight(int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setScrollBarSize(int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setScrollBarStyle(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.SCROLLBARS_INSIDE_OVERLAY, android.view.View.SCROLLBARS_INSIDE_INSET, android.view.View.SCROLLBARS_OUTSIDE_OVERLAY, android.view.View.SCROLLBARS_OUTSIDE_INSET}" />
    </annotation>
  </item>
  <item name="android.view.View void setScrollIndicators(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.SCROLL_INDICATOR_TOP, android.view.View.SCROLL_INDICATOR_BOTTOM, android.view.View.SCROLL_INDICATOR_LEFT, android.view.View.SCROLL_INDICATOR_RIGHT, android.view.View.SCROLL_INDICATOR_START, android.view.View.SCROLL_INDICATOR_END}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.View void setScrollIndicators(int, int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.SCROLL_INDICATOR_TOP, android.view.View.SCROLL_INDICATOR_BOTTOM, android.view.View.SCROLL_INDICATOR_LEFT, android.view.View.SCROLL_INDICATOR_RIGHT, android.view.View.SCROLL_INDICATOR_START, android.view.View.SCROLL_INDICATOR_END}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.View void setScrollIndicators(int, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.SCROLL_INDICATOR_TOP, android.view.View.SCROLL_INDICATOR_BOTTOM, android.view.View.SCROLL_INDICATOR_LEFT, android.view.View.SCROLL_INDICATOR_RIGHT, android.view.View.SCROLL_INDICATOR_START, android.view.View.SCROLL_INDICATOR_END}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.View void setScrollX(int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setScrollY(int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setTextAlignment(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.TEXT_ALIGNMENT_INHERIT, android.view.View.TEXT_ALIGNMENT_GRAVITY, android.view.View.TEXT_ALIGNMENT_CENTER, android.view.View.TEXT_ALIGNMENT_TEXT_START, android.view.View.TEXT_ALIGNMENT_TEXT_END, android.view.View.TEXT_ALIGNMENT_VIEW_START, android.view.View.TEXT_ALIGNMENT_VIEW_END}" />
    </annotation>
  </item>
  <item name="android.view.View void setTextDirection(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.TEXT_DIRECTION_INHERIT, android.view.View.TEXT_DIRECTION_LTR, android.view.View.TEXT_DIRECTION_RTL, android.view.View.TEXT_DIRECTION_ANY_RTL, android.view.View.TEXT_DIRECTION_LOCALE, android.view.View.TEXT_DIRECTION_FIRST_STRONG, android.view.View.TEXT_DIRECTION_FIRST_STRONG_LTR, android.view.View.TEXT_DIRECTION_FIRST_STRONG_RTL}" />
    </annotation>
  </item>
  <item name="android.view.View void setTooltipText(java.lang.CharSequence) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setTop(int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setTranslationX(float) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setTranslationY(float) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setVisibility(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View void setX(float) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setY(float) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void setZ(float) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.View void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.AccessibilityDelegate void addExtraDataToAccessibilityNodeInfo(android.view.View, android.view.accessibility.AccessibilityNodeInfo, java.lang.String, android.os.Bundle) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.AccessibilityDelegate void addExtraDataToAccessibilityNodeInfo(android.view.View, android.view.accessibility.AccessibilityNodeInfo, java.lang.String, android.os.Bundle) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.AccessibilityDelegate void addExtraDataToAccessibilityNodeInfo(android.view.View, android.view.accessibility.AccessibilityNodeInfo, java.lang.String, android.os.Bundle) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.AccessibilityDelegate void addExtraDataToAccessibilityNodeInfo(android.view.View, android.view.accessibility.AccessibilityNodeInfo, java.lang.String, android.os.Bundle) 3">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View.MeasureSpec int getMode(int)">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.MeasureSpec.UNSPECIFIED, android.view.View.MeasureSpec.EXACTLY, android.view.View.MeasureSpec.AT_MOST}" />
    </annotation>
  </item>
  <item name="android.view.View.MeasureSpec int makeMeasureSpec(int, int) 0">
    <annotation name="android.support.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="1073741823" />
    </annotation>
  </item>
  <item name="android.view.View.MeasureSpec int makeMeasureSpec(int, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.MeasureSpec.UNSPECIFIED, android.view.View.MeasureSpec.EXACTLY, android.view.View.MeasureSpec.AT_MOST}" />
    </annotation>
  </item>
  <item name="android.view.ViewGroup">
    <annotation name="android.support.annotation.UiThread" />
  </item>
  <item name="android.view.ViewGroup int getDescendantFocusability()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.ViewGroup.FOCUS_BEFORE_DESCENDANTS, android.view.ViewGroup.FOCUS_AFTER_DESCENDANTS, android.view.ViewGroup.FOCUS_BLOCK_DESCENDANTS}" />
    </annotation>
  </item>
  <item name="android.view.ViewGroup int getPersistentDrawingCache()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.ViewGroup.PERSISTENT_NO_CACHE, android.view.ViewGroup.PERSISTENT_ANIMATION_CACHE, android.view.ViewGroup.PERSISTENT_SCROLLING_CACHE, android.view.ViewGroup.PERSISTENT_ALL_CACHES}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.ViewGroup void dispatchProvideAutofillStructure(android.view.ViewStructure, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.ViewGroup void onDescendantInvalidated(android.view.View, android.view.View)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.ViewGroup void onDescendantInvalidated(android.view.View, android.view.View) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void onDescendantInvalidated(android.view.View, android.view.View) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void setDescendantFocusability(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.ViewGroup.FOCUS_BEFORE_DESCENDANTS, android.view.ViewGroup.FOCUS_AFTER_DESCENDANTS, android.view.ViewGroup.FOCUS_BLOCK_DESCENDANTS}" />
    </annotation>
  </item>
  <item name="android.view.ViewGroup void setPersistentDrawingCache(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.ViewGroup.PERSISTENT_NO_CACHE, android.view.ViewGroup.PERSISTENT_ANIMATION_CACHE, android.view.ViewGroup.PERSISTENT_SCROLLING_CACHE, android.view.ViewGroup.PERSISTENT_ALL_CACHES}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.ViewGroup.MarginLayoutParams MarginLayoutParams(int, int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.ViewGroup.MarginLayoutParams MarginLayoutParams(int, int) 1">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.ViewGroup.MarginLayoutParams bottomMargin">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.ViewGroup.MarginLayoutParams leftMargin">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.ViewGroup.MarginLayoutParams rightMargin">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.ViewGroup.MarginLayoutParams topMargin">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.ViewGroup.MarginLayoutParams void setMarginEnd(int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.ViewGroup.MarginLayoutParams void setMarginStart(int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.ViewGroup.MarginLayoutParams void setMargins(int, int, int, int) 0">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.ViewGroup.MarginLayoutParams void setMargins(int, int, int, int) 1">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.ViewGroup.MarginLayoutParams void setMargins(int, int, int, int) 2">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.ViewGroup.MarginLayoutParams void setMargins(int, int, int, int) 3">
    <annotation name="android.support.annotation.Px" />
  </item>
  <item name="android.view.ViewGroupOverlay void add(android.view.View) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroupOverlay void remove(android.view.View) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewOverlay void add(android.graphics.drawable.Drawable) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewOverlay void remove(android.graphics.drawable.Drawable) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewParent void notifySubtreeAccessibilityStateChanged(android.view.View, android.view.View, int) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewParent void onDescendantInvalidated(android.view.View, android.view.View) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewParent void onDescendantInvalidated(android.view.View, android.view.View) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewStructure android.view.ViewStructure.HtmlInfo.Builder newHtmlInfoBuilder(java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewStructure android.view.autofill.AutofillId getAutofillId()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.ViewStructure void setAutofillHints(java.lang.String[]) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.ViewStructure void setAutofillId(android.view.autofill.AutofillId) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewStructure void setAutofillId(android.view.autofill.AutofillId, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewStructure void setAutofillType(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.AUTOFILL_TYPE_NONE, android.view.View.AUTOFILL_TYPE_TEXT, android.view.View.AUTOFILL_TYPE_TOGGLE, android.view.View.AUTOFILL_TYPE_LIST, android.view.View.AUTOFILL_TYPE_DATE}" />
    </annotation>
  </item>
  <item name="android.view.ViewStructure void setHtmlInfo(android.view.ViewStructure.HtmlInfo) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewStructure void setImportantForAutofill(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.IMPORTANT_FOR_AUTOFILL_AUTO, android.view.View.IMPORTANT_FOR_AUTOFILL_YES, android.view.View.IMPORTANT_FOR_AUTOFILL_NO, android.view.View.IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS, android.view.View.IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS}" />
    </annotation>
  </item>
  <item name="android.view.ViewStructure void setTextIdEntry(java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewStructure void setWebDomain(java.lang.String) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.ViewStructure.HtmlInfo java.lang.String getTag()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewStructure.HtmlInfo java.util.List&lt;android.util.Pair&lt;java.lang.String,java.lang.String&gt;&gt; getAttributes()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.ViewStructure.HtmlInfo.Builder android.view.ViewStructure.HtmlInfo.Builder addAttribute(java.lang.String, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewStructure.HtmlInfo.Builder android.view.ViewStructure.HtmlInfo.Builder addAttribute(java.lang.String, java.lang.String) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewStub ViewStub(android.content.Context, int) 1">
    <annotation name="android.support.annotation.LayoutRes" />
  </item>
  <item name="android.view.ViewStub int getInflatedId()">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.ViewStub int getLayoutResource()">
    <annotation name="android.support.annotation.LayoutRes" />
  </item>
  <item name="android.view.ViewStub void setInflatedId(int) 0">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.ViewStub void setLayoutResource(int) 0">
    <annotation name="android.support.annotation.LayoutRes" />
  </item>
  <item name="android.view.Window T findViewById(int) 0">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.Window T requireViewById(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Window T requireViewById(int) 0">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.Window android.view.LayoutInflater getLayoutInflater()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Window android.view.View getCurrentFocus()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.Window int getColorMode()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.content.pm.ActivityInfo.COLOR_MODE_DEFAULT, android.content.pm.ActivityInfo.COLOR_MODE_WIDE_COLOR_GAMUT, android.content.pm.ActivityInfo.COLOR_MODE_HDR}" />
    </annotation>
  </item>
  <item name="android.view.Window int getNavigationBarColor()">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.Window int getNavigationBarDividerColor()">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.Window int getStatusBarColor()">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.Window void addOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener, android.os.Handler) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Window void setBackgroundDrawableResource(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.Window void setColorMode(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.content.pm.ActivityInfo.COLOR_MODE_DEFAULT, android.content.pm.ActivityInfo.COLOR_MODE_WIDE_COLOR_GAMUT, android.content.pm.ActivityInfo.COLOR_MODE_HDR}" />
    </annotation>
  </item>
  <item name="android.view.Window void setContentView(int) 0">
    <annotation name="android.support.annotation.LayoutRes" />
  </item>
  <item name="android.view.Window void setFeatureDrawableResource(int, int) 1">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.Window void setIcon(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.Window void setLogo(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.Window void setNavigationBarColor(int) 0">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.Window void setNavigationBarDividerColor(int) 0">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.Window void setStatusBarColor(int) 0">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.Window void setTitleColor(int) 0">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.Window void setWindowAnimations(int) 0">
    <annotation name="android.support.annotation.StyleRes" />
  </item>
  <item name="android.view.Window.Callback android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.Window.Callback android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback, int)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.Window.Callback android.view.View onCreatePanelView(int)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.Window.Callback void onProvideKeyboardShortcuts(java.util.List&lt;android.view.KeyboardShortcutGroup&gt;, android.view.Menu, int) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.WindowInsets android.view.DisplayCutout getDisplayCutout()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.WindowManager">
    <annotation name="android.support.annotation.SystemService">
      <val name="value" val="android.content.Context.WINDOW_SERVICE" />
    </annotation>
  </item>
  <item name="android.view.WindowManager.LayoutParams int getColorMode()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.content.pm.ActivityInfo.COLOR_MODE_DEFAULT, android.content.pm.ActivityInfo.COLOR_MODE_WIDE_COLOR_GAMUT, android.content.pm.ActivityInfo.COLOR_MODE_HDR}" />
    </annotation>
  </item>
  <item name="android.view.WindowManager.LayoutParams layoutInDisplayCutoutMode">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT, android.view.WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES, android.view.WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.WindowManager.LayoutParams softInputMode">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED, android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_UNCHANGED, android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN, android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN, android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE, android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE, android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_UNSPECIFIED, android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE, android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN, android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING, android.view.WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.WindowManager.LayoutParams type">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.WindowManager.LayoutParams.TYPE_BASE_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_STARTING, android.view.WindowManager.LayoutParams.TYPE_DRAWN_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_PANEL, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG, android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR, android.view.WindowManager.LayoutParams.TYPE_SEARCH_BAR, android.view.WindowManager.LayoutParams.TYPE_PHONE, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ALERT, android.view.WindowManager.LayoutParams.TYPE_TOAST, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_PRIORITY_PHONE, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG, android.view.WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ERROR, android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD, android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG, android.view.WindowManager.LayoutParams.TYPE_WALLPAPER, android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL, android.view.WindowManager.LayoutParams.TYPE_PRIVATE_PRESENTATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_ACCESSIBILITY_OVERLAY}" />
    </annotation>
  </item>
  <item name="android.view.WindowManager.LayoutParams void setColorMode(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.content.pm.ActivityInfo.COLOR_MODE_DEFAULT, android.content.pm.ActivityInfo.COLOR_MODE_WIDE_COLOR_GAMUT, android.content.pm.ActivityInfo.COLOR_MODE_HDR}" />
    </annotation>
  </item>
</root>

